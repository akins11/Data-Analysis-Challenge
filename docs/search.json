[
  {
    "objectID": "posts/FIFA-21-data-cleaning/index.html",
    "href": "posts/FIFA-21-data-cleaning/index.html",
    "title": "FIFA 2021 Data Cleaning In R",
    "section": "",
    "text": "One important step in data analysis that can not be overlooked is data cleaning, this ensure that the data is error free, complete, accurate and consistent by identifying and handling missing data, correcting or removing invalid and inconsistent records across the dataset. In doing this you will not only ensure that any insights or decisions made from the data are accurate and reliable, but also improve data storage by reducing the amount of unnecessary or redundant data, which can save storage space and improve processing times.\nIn this tutorial, we will be working with the FIFA-2021 data of different players around the world. This dataset contains information that can help us gain several insights about the demographics and attributes of professional football players However, like many other real-world datasets, it is messy and contains errors, inconsistencies, and missing data. Today we will clean and prepare the data for future analysis using several data cleaning techniques."
  },
  {
    "objectID": "posts/FIFA-21-data-cleaning/index.html#summary",
    "href": "posts/FIFA-21-data-cleaning/index.html#summary",
    "title": "FIFA 2021 Data Cleaning In R",
    "section": "Summary",
    "text": "Summary\nNow that we have our cleaned data, Here is a brief highlight of the steps taken to clean the data.\n* Loading the data: We imported the data set using the read_csv() function.\n* Column names: All column name were converted to lower case with an underscore.\n* Variable cleaning: Separated the contract variable, change the loan end date and start date of each player’s national career to a date data type, remove additional characters from the height and weight column, converted players name and country to all english character, also removed symbols and escape characters from the ratings and hits column.\n* Position table: Created a new table with each player id and field positions.\n* Data validation: Validated all other variables for completeness and consistency.\n* Data quality check: Verified all data types for each column.\n* Saving the data: Saved both the cleaned data and the new position table in a .csv file."
  },
  {
    "objectID": "posts/FIFA-21-data-cleaning/index.html#conclusion",
    "href": "posts/FIFA-21-data-cleaning/index.html#conclusion",
    "title": "FIFA 2021 Data Cleaning In R",
    "section": "Conclusion",
    "text": "Conclusion\nThe primary goal of data cleaning is to improve the quality and accuracy of the data so that it can be useful for analysis and decision-making. Data cleaning is also a critical step in the data analysis/science process and cannot be ignored or overlooked when working with data. With the data cleaned, we can proceed into data exploration, visualization, preprocessing, etc."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The data analysis challenge blog is a website dedicated to helping data analysts and data scientists improve their skills in cleaning, exploring, and visualizing data using various tools such as R, Python and SQL. The blog will provides a variety of resources, including tutorials, case studies, and step-by-step guides to help users navigate common challenges in data analysis."
  },
  {
    "objectID": "posts/exploratory-analysis/index.html",
    "href": "posts/exploratory-analysis/index.html",
    "title": "Exploratory Analysis On FIFA 2021",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis Challenge",
    "section": "",
    "text": "Historical Analysis of Olist E-Commerce Platform\n\n\n\n\n\n\n\nR\n\n\nhistorical analysis\n\n\nvisualization\n\n\n\n\n\n\n\n\n\n\n\nApr 22, 2023\n\n\nAyomide Akinwande\n\n\n\n\n\n\n  \n\n\n\n\nFIFA 2021 Data Cleaning In R\n\n\n\n\n\n\n\nR\n\n\ndata cleaning\n\n\n\n\n\n\n\n\n\n\n\nMar 16, 2023\n\n\nAyomide Akinwande\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 13, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Olist-Analysis/analysis.html",
    "href": "posts/Olist-Analysis/analysis.html",
    "title": "Olist (Data..) Analysis",
    "section": "",
    "text": "introduction on (..) analysis, how it will be performed, what is olist, what the focus will be on, the various questions that will be answered, the conclusion."
  },
  {
    "objectID": "posts/Olist-Analysis/analysis.html#libraries",
    "href": "posts/Olist-Analysis/analysis.html#libraries",
    "title": "Olist (Data..) Analysis",
    "section": "Libraries",
    "text": "Libraries\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(gt)\nlibrary(gtExtras)"
  },
  {
    "objectID": "posts/Olist-Analysis/analysis.html#importing-data",
    "href": "posts/Olist-Analysis/analysis.html#importing-data",
    "title": "Olist (Data..) Analysis",
    "section": "Importing data",
    "text": "Importing data\n\ncsv_name <- c(\n  \"customers\", \n  \"order_items\", \n  \"order_payments\", \n  \"order_reviews\", \n  \"orders\",\n  \"product_category_name\",\n  \"products\",\n  \"sellers\"\n)\n\nall_datasets <- map(\n  csv_name, \\(table) read_csv(glue::glue(\"data/olist_{table}_dataset.csv\"))\n)\nnames(all_datasets) <- csv_name\n\n\norders <- all_datasets$orders\norder_items <- all_datasets$order_items\norder_payment <- all_datasets$order_payments\nproducts <- all_datasets$products\nproduct_category_name <- all_datasets$product_category_name\ncustomers <- all_datasets$customers\nsellers <- all_datasets$sellers\nreviews <- all_datasets$order_reviews\n\nrm(all_datasets)\n\n\nHelper functions\n\n# hide\nclean_names <- function(data, new_names = NULL) {\n  if (is.null(new_names)) {\n    data |>\n      dplyr::rename_with(\n        \\(c) stringr::str_replace_all(c, \"_\", \" \") |> stringr::str_to_title()\n      )\n  } else {\n    \n    names(data) <- new_names\n    \n    return(data)\n  }\n}\n\ninteractive_gt <- function(table, sort = FALSE, filter = FALSE) {\n  gt::opt_interactive(\n    table,\n    use_pagination_info = FALSE, \n    use_sorting = sort,\n    use_filters = filter,\n    pagination_type = \"simple\"\n  )\n    \n}\n\n\n# hide\ncolor_line <- \"#3B3B3B\"\ncolor_title <- \"#5C5C5C\"\ncolor_axis_title <- \"#4D4D4D\"\ncolor_highlight <- \"#F7F7F7\"\ncolor_bold <- \"#888888\""
  },
  {
    "objectID": "posts/Olist-Analysis/analysis.html#data-cleaning",
    "href": "posts/Olist-Analysis/analysis.html#data-cleaning",
    "title": "Olist (Data..) Analysis",
    "section": "Data Cleaning",
    "text": "Data Cleaning\n\nlvls <- product_category_name$product_category_name\nnames(lvls) <- product_category_name$product_category_name_english\n\nproducts <- products |>\n  mutate(\n    product_category_name = as_factor(product_category_name),\n    product_category_name = fct_recode(product_category_name, !!!lvls),\n    product_category_name = str_replace_all(product_category_name, \"_\", \" \") |>\n                            str_to_title()\n  ) \n\norder_payment <- order_payment |>\n  mutate(payment_type = str_replace(payment_type, \"_\", \" \") |> str_to_title())"
  },
  {
    "objectID": "posts/Olist-Analysis/analysis.html#analysis",
    "href": "posts/Olist-Analysis/analysis.html#analysis",
    "title": "Olist (Data..) Analysis",
    "section": "Analysis",
    "text": "Analysis\n\nRevenue\n\nWhat is the total revenue generated by Olist, and how has it changed over time?\n\ntemp <- orders |>\n  left_join(order_payment, by = \"order_id\") |>\n  filter(!order_status %in% c(\"canceled\", \"unavailable\"))\n\n\ntotal revenue generated by olist\n\ntemp |>\n  summarise(total = sum(payment_value, na.rm = TRUE),\n            minimum = min(payment_value, na.rm = TRUE),\n            average = round(mean(payment_value, na.rm = TRUE), 2),\n            maximum = max(payment_value, na.rm = TRUE)) |>\n  add_column(order_purchase_year = \"ALL\", .before = 1) |>\n  bind_rows(\n    temp |>\n      mutate(order_purchase_year = as.character(year(order_purchase_timestamp))) |> \n      group_by(order_purchase_year) |>\n      summarise(total = sum(payment_value, na.rm = TRUE),\n                minimum = min(payment_value, na.rm = TRUE),\n                average = round(mean(payment_value, na.rm = TRUE), 2),\n                maximum = max(payment_value, na.rm = TRUE)) \n  ) |>\n  \n  clean_names() |>\n  gt() |>\n  fmt_number() |>\n  tab_spanner(label = \"Revenue\", columns = Total:Maximum) |>\n  tab_style(\n    style = cell_fill(color = color_highlight),\n    locations = cells_body(columns = Total)\n  ) |>\n  tab_style(\n    style = cell_fill(color = color_highlight),\n    locations =  cells_body(rows = 1)\n  )\n\n\n\n\n\n  \n    \n    \n      Order Purchase Year\n      \n        Revenue\n      \n    \n    \n      Total\n      Minimum\n      Average\n      Maximum\n    \n  \n  \n    ALL\n15,739,137.01\n0.00\n153.44\n13,664.08\n    2016\n51,813.38\n0.74\n165.54\n1,423.55\n    2017\n7,092,491.65\n0.00\n151.74\n13,664.08\n    2018\n8,594,831.98\n0.00\n154.81\n7,274.88\n  \n  \n  \n\n\n\n\nFindings :: A total revenue of 15,739,137 was generated during the period from September 2016 to October 2018. while the highest revenue generated in a single year was in 2018 which contain+ 10 months in total, 2016 have just 4 months and generated the lowest revenue.\nAlso the average revenue by order is 153.44, the highest revenue was generated in 2017 the average revenue generate in 2018 is closer to the overall average revenue.\n\n\nhow has it changed over time\n\ntemp |>\n  mutate(order_purchase_date = date(order_purchase_timestamp)) |>\n  group_by(order_purchase_date) |>\n  summarise(revenue = sum(payment_value, na.rm = TRUE)) |> \n  \n  ggplot(aes(x = order_purchase_date, y = revenue)) +\n  geom_line(color = color_line) +\n  labs(x = \"Order Purchase Date\", \n       y = \"Revenue\", \n       title = \"Revenue Generated (Sep 2016 - Oct 2018)\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9))\n\n\n\n\nfindings :: revenue generated over time are volatile+ especially towards 2018. the highest amount of revenue (178,450) was generated in 2017-11-24\n\n\nBy year\n\ntemp |>\n  mutate(order_purchase_year = year(order_purchase_timestamp),\n         order_purchase_date = date(order_purchase_timestamp)) |>\n  group_by(order_purchase_date, order_purchase_year) |>\n  summarise(revenue = sum(payment_value, na.rm = TRUE)) |>\n  \n  ggplot(aes(x = order_purchase_date, y = revenue)) +\n  geom_line(color = color_line, show.legend = FALSE) +\n  labs(x = NULL, y = NULL, title = \"Revenue Generated by Year Period\") +\n  facet_wrap(vars(order_purchase_year), ncol = 1, scales = \"free\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9),\n        axis.text = element_text(size = 8))\n\n`summarise()` has grouped output by 'order_purchase_date'. You can override\nusing the `.groups` argument.\n\n\n\n\n\nfindings:: revenue generated in 2016 falls below 9,000 and reached it peak in October revenue in 2017 mostly fell below 50,000 except in November when it add it highest peak. after which there was a minor consistent drop in revenue. In 2018 Olist revenue became more volatile than the previous years, and saw the most decline in revenue after it highest peak in May - June and also August - September. a common discover is that revenue generally declined in December in 2016 and 2017.\n\n\n\n\nProducts\n\nWhat are the most popular product categories on Olist, and how do their sales volumes compare to each other?\n\norders |>\n  left_join(order_payment, by = \"order_id\") |>\n  left_join(select(order_items, order_id, product_id), by = \"order_id\") |>\n  left_join(products, by = \"product_id\") |>\n  filter(!order_status %in% c(\"canceled\", \"unavailable\")) |>\n  \n  group_by(product_category_name) |>\n  summarise(number_purchses = n(),\n            total_revenue = sum(payment_value, na.rm = TRUE)) |>\n  mutate(product_category_name = case_when(is.na(product_category_name) ~ \"`No Category`\",\n                                           .default = product_category_name),\n         percent_purchases = round(proportions(number_purchses)*100, 2),\n         percent_revenue = round(proportions(total_revenue)*100, 2)) |>\n  select(product_category_name, \n         number_purchses, \n         percent_purchases, \n         total_revenue, \n         percent_revenue) |>\n  arrange(desc(total_revenue)) |> \n  \n  clean_names(c(\"Product Category\", \n                \"No. Purchase\", \n                \"No. Purchase(%)\",\n                \"Total Revenue\",\n                \"Revenue(%)\")) |>\n  gt() |>\n  fmt_integer(columns = `No. Purchase`) |>\n  fmt_number(columns = `Total Revenue`) |>\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            locations = cells_body(columns = c(`No. Purchase`, `Total Revenue`))) |>\n  interactive_gt(filter = TRUE)\n\nWarning in left_join(left_join(orders, order_payment, by = \"order_id\"), : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 14 of `x` matches multiple rows in `y`.\nℹ Row 100786 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\n\nfindings:: the most purchase product is Bed Bath Table racking up 11,115 (above 11 thousand purchase) the other top 5 product categories ranges from health beauty to computer accessories. and they make up 40.2% of all purchased products. just like the number of purchases the all the top 5 products are included in sequential except for Sport Leisure which generated less revenue compared to Computers Accessories & Furniture Decor. Also Computers Accessories generated more revenue in total than furniture Decor\nand overall they make up 38.2% of the total revenue generated.\n\n\nWhat is the average order value (AOV) on Olist, and how does this vary by product category or payment method?\n\nAverage Order Value\n\norder_payment |>\n  summarise(total_revenue = sum(payment_value, na.rm = TRUE),\n            number_of_orders = n_distinct(order_id),\n            average_order_value = total_revenue / number_of_orders) |>\n  clean_names() |>\n  gt() |>\n  fmt_number(decimals = 1) |>\n  tab_style(style = css(\"text-align\" = \"center\"),\n            locations = cells_body()) |>\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            locations = cells_body(columns = `Average Order Value`)) \n\n\n\n\n\n  \n    \n    \n      Total Revenue\n      Number Of Orders\n      Average Order Value\n    \n  \n  \n    16,008,872.1\n99,440.0\n161.0\n  \n  \n  \n\n\n\n\nfindings:: Out of a total of 99,440 unique order, [the amount customers a willing to spend] is 161.0\n\n\n(AOV) By products\n\norders |>\n  left_join(order_payment, by = \"order_id\") |>\n  left_join(select(order_items, order_id, product_id), by = \"order_id\") |>\n  left_join(products, by = \"product_id\") |>\n  select(order_id, payment_value, product_category_name) |>\n  \n  group_by(product_category_name) |>\n  summarise(total_revenue = sum(payment_value, na.rm = TRUE),\n            number_of_orders = n_distinct(order_id),\n            average_order_value = total_revenue / number_of_orders) |>\n  arrange(desc(average_order_value)) |>\n  \n  clean_names() |>\n  gt() |>\n  fmt_number(decimals = 1) |>\n  fmt_integer(columns = `Number Of Orders`) |>\n  cols_label(`Product Category Name` = \"Product Category\",\n             `Number Of Orders` = md(\"*No.* Orders\")) |>\n  tab_style(style = cell_fill(color = color_highlight),\n            locations = cells_body(columns = `Average Order Value`)) |>\n  interactive_gt(filter = TRUE)\n\nWarning in left_join(left_join(orders, order_payment, by = \"order_id\"), : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 14 of `x` matches multiple rows in `y`.\nℹ Row 100786 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\n\nFindings:: the top 5 product category with the highest order value are categories that can be describe as technology applications.\n\n\n\nWhat are the top-selling products on Olist, and how have their sales trends changed over time?\n\nTop 10 selling product\n\ntemp <- orders |>\n  left_join(order_payment, by = \"order_id\") |>\n  left_join(order_items, by = \"order_id\", relationship = \"many-to-many\") |>\n  left_join(products, by = \"product_id\") |>\n  \n  filter(!order_status %in% c(\"canceled\", \"unavailable\")) |>\n  group_by(product_id) |>\n  summarise(number_of_order = n(),\n            total_revenue = sum(payment_value, na.rm = TRUE)) |>\n  mutate(product_id_label = str_trunc(product_id, width = 12),\n         percentage = proportions(total_revenue)*100) |>\n  slice_max(order_by = total_revenue, n = 10) \n\n\nggplot(temp, aes(x = total_revenue, y = fct_reorder(product_id_label, total_revenue))) +\n  geom_col(fill = \"#888888\") +\n  geom_text(aes(label = number_of_order), hjust = 1.2, color = \"#333333\") +\n  labs(x = \"Total Revenue\", \n       y = \"Product Id\", \n       title = \"Top 10 Best Selling Products\",\n       subtitle = \"and Unique Purchase(In text)\") +\n  scale_x_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        plot.subtitle = element_text(color = \"#777777\", size = 10),\n        axis.title = element_text(color = color_axis_title, size = 9))\n\n\n\n\nFindings:: The highest selling product with revenue of 109,313 was purchased 8 times unlike other products with 100 purchases and above. their total revenue make up 3.57% of all revenue for (32,730) unique products\n\n\nSales Trend over time\n\norders |>\n  left_join(order_payment, by = \"order_id\") |>\n  left_join(order_items, by = \"order_id\") |>\n  left_join(products, by = \"product_id\") |>\n  filter(!order_status %in% c(\"canceled\", \"unavailable\"),\n         product_id %in% temp$product_id) |>\n  \n  group_by(order_purchase_timestamp, product_id) |>\n  summarise(total_revenue = sum(payment_value, na.rm = TRUE)) |>\n  ungroup() |>\n  filter(product_id != \"5769ef0a239114ac3a854af00df129e4\") |>\n  \n  ggplot(aes(x = order_purchase_timestamp,\n             y = total_revenue,\n             color = product_id,\n             group = 1)) +\n  geom_line(show.legend = FALSE) +\n  facet_wrap(facets = vars(product_id), ncol = 2, scales = \"free_y\") +\n  labs(x = \"Purchase Date\", \n       y = \"revenue\", \n       title = \"Top Product Revenue Over Time\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(colour = color_title, size = 11),\n        axis.title = element_text(colour = color_axis_title, size = 8),\n        axis.text = element_text(size = 8))\n\nWarning in left_join(left_join(orders, order_payment, by = \"order_id\"), : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 14 of `x` matches multiple rows in `y`.\nℹ Row 100786 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n`summarise()` has grouped output by 'order_purchase_timestamp'. You can\noverride using the `.groups` argument.\n\n\n\n\n\nfindings:: there are presence of both high and low variability in revenue across the top product, The highest revenue generating product is excluded because of all purchases where made\n\n\n\n\nOrders\n\nHow many orders were placed on Olist, and how does this vary by month or season?\n\ntemp <- orders |> \n  mutate(order_day = day(order_purchase_timestamp),\n         order_month = month(order_purchase_timestamp, label = TRUE, abbr = TRUE),\n         order_year = year(order_purchase_timestamp),\n         order_date = date(order_purchase_timestamp))\n\n\ntemp |>\n  group_by(order_day, order_year) |>\n  summarise(number_of_orders = n()) |> \n  \n  ggplot(aes(x = order_day, \n             y = number_of_orders, \n             group = 1)) +\n  geom_line(color = color_line, show.legend = FALSE) +\n  facet_wrap(vars(order_year), ncol = 1, scales = \"free_y\") +\n  labs(x = \"Days of the Month\",\n       y = \"No. Orders\",\n       title = \"Number Of Orders in Each Day\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  scale_x_continuous(breaks = seq(1, 31, 2)) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9))\n\n`summarise()` has grouped output by 'order_day'. You can override using the\n`.groups` argument.\n\n\n\n\n\nfinding:: number of orders was quite low in 2016. the average order in 2017 was 1,455, while the most order of any day happens on the 24th. the average number of orders in 2018 was 1,742, and more order were made on the 16th day after which a steady decline down to the 31st day.\n\nBy Month\n\ntemp |>\n  group_by(order_month, order_year) |>\n  summarise(number_of_orders = n()) |>\n  \n  ggplot(aes(x = order_month, \n             y = number_of_orders, \n             group = 1)) +\n  geom_line(color = color_line, show.legend = FALSE) +\n  facet_wrap(vars(order_year), ncol = 1, scales = \"free_y\") +\n  labs(x = NULL,\n       y = \"No. Orders\",\n       title = \"Number Of Orders by Month\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9))\n\n`summarise()` has grouped output by 'order_month'. You can override using the\n`.groups` argument.\n\n\n\n\n\nfindings :: there was a steady increase in the total number of orders in 2017 except for some months such as April, June and December when orders declined. but for 2018 which had more order on average saw a steep decline across several months.\n\n\nBy Date\n\ntemp |>\n  group_by(order_date, order_year) |>\n  summarise(number_of_orders = n()) |>\n  \n  ggplot(aes(x = order_date, \n             y = number_of_orders, \n             group = 1)) +\n  geom_line(color = color_line, show.legend = FALSE) +\n  facet_wrap(vars(order_year), ncol = 1, scales = \"free\") +\n  labs(x = \"Order Date\", \n       y = \"No. Order\",\n       title = \"Number of Orders by Date\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9),\n        axis.text.x = element_text(size = 8))\n\n`summarise()` has grouped output by 'order_date'. You can override using the\n`.groups` argument.\n\n\n\n\n\nfindings:: just like the amount of revenue generated, total order across each year show the seasonality trend, and in 2017 we can also see the peaked period which lasted for a short period of time in (…) and 2018 also carries the same volatility as it was for revenue.\n\n\n\nWhat is the average order cancellation rate on Olist, and how does this impact seller performance?.\nfirst we should …\n\norders |>\n  count(order_status, sort = TRUE, name = \"number_of_order\") |>\n  mutate(percentage = proportions(number_of_order)*100,\n         order_status = str_to_title(order_status)) |>\n  \n  clean_names() |>\n  gt(rowname_col = \"Order Status\") |>\n  fmt_number(columns = `Number Of Order`, decimals = 0) |>\n  fmt_number(columns = Percentage) |>\n  cols_label(`Number Of Order` = md(\"*No* Order\"))\n\n\n\n\n\n  \n    \n    \n      \n      No Order\n      Percentage\n    \n  \n  \n    Delivered\n96,478\n97.02\n    Shipped\n1,107\n1.11\n    Canceled\n625\n0.63\n    Unavailable\n609\n0.61\n    Invoiced\n314\n0.32\n    Processing\n301\n0.30\n    Created\n5\n0.01\n    Approved\n2\n0.00\n  \n  \n  \n\n\n\n\nfindings 97% of order were delivered to various customers successfully. 0.63% of all orders were canceled and also 0.61% where unavailable,\n\norders |>\n  left_join(select(order_items, order_id, seller_id), by = \"order_id\") |>\n  left_join(sellers, by = \"seller_id\") |>\n  left_join(order_payment, by = \"order_id\") |>\n\n  group_by(seller_id, order_status) |>\n  summarise(count = n(),\n            average_revenue = mean(payment_value, na.rm = TRUE)) |>\n  mutate(percentage_of_seller_order = proportions(count)*100,\n         seller_id = if_else(is.na(seller_id), \"No Sellers\", seller_id),\n         seller_id = str_trunc(seller_id, width = 15)) |>\n\n  filter(order_status == \"canceled\") |> \n  ungroup() |>\n  arrange(desc(count)) |> \n  rename(number_of_canceled = count) |>\n  select(-order_status)  |>\n  \n  clean_names() |>\n  gt() |>\n  fmt_number(columns = c(`Average Revenue`, `Percentage Of Seller Order`)) |>\n  cols_label(`Number Of Canceled` = md(\"*No* Canceled\")) |>\n  interactive_gt()\n\nWarning in left_join(left_join(left_join(orders, select(order_items, order_id, : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 31104 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n`summarise()` has grouped output by 'seller_id'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\nfindings:: The average percentage of sellers order that was canceled is 22.3%. The average revenue generated by sellers with no cancellation is 224. (median 132) while the average revenue generated by sellers with cancellations is 220. (median 115) there is not must difference in both cases which can mean less impact.\n\n\nWhich payment methods are most commonly used by Olist customers, and how does this vary by product category or geographic region?\n\ncommon payment method\n\norders |>\n  left_join(order_payment, by = \"order_id\") |>\n  mutate(payment_type = if_else(is.na(payment_type), \"Not Defined\", payment_type)) |>\n  count(payment_type, sort = TRUE, name = \"Count\") |>\n  \n  clean_names(c(\"Payment Method\", \"Number of Order\")) |>\n  gt() |>\n  fmt_integer() |>\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            locations = cells_body(columns = `Number of Order`))\n\n\n\n\n\n  \n    \n    \n      Payment Method\n      Number of Order\n    \n  \n  \n    Credit Card\n76,795\n    Boleto\n19,784\n    Voucher\n5,775\n    Debit Card\n1,529\n    Not Defined\n4\n  \n  \n  \n\n\n\n\nfindings:: most order used credit cards as payment for purchases.\n\n\nBy product category\n\norders |>\n  left_join(order_payment, by = \"order_id\") |>\n  left_join(order_items, by = \"order_id\") |>\n  left_join(products, by = \"product_id\") |>\n  \n  group_by(product_category_name, payment_type) |>\n  summarise(count = n()) |>\n  arrange(desc(count), product_category_name, desc(count)) |>\n  mutate(prop_payment_type = proportions(count)*100,\n         payment_type = if_else(is.na(payment_type), \"No Specified Method\", payment_type)) |>\n  \n  clean_names(c(\"c\", \"Payment Method\", \"Orders\", \"(%) by Payment Method\")) |>\n  gt() |>\n  fmt_integer(columns = Orders) |>\n  fmt_number(columns = `(%) by Payment Method`) |>\n  tab_options(column_labels.font.size = 15,\n              column_labels.font.weight = \"bold\",\n              row_group.background.color = \"#FAFAFA\",\n              row_group.font.size = 13)\n\nWarning in left_join(left_join(orders, order_payment, by = \"order_id\"), : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 14 of `x` matches multiple rows in `y`.\nℹ Row 100786 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n`summarise()` has grouped output by 'product_category_name'. You can override\nusing the `.groups` argument.\n\n\n\n\n\n\n  \n    \n    \n      Payment Method\n      Orders\n      (%) by Payment Method\n    \n  \n  \n    \n      Bed Bath Table\n    \n    Credit Card\n8,959\n75.78\n    Boleto\n1,875\n15.86\n    Voucher\n847\n7.16\n    Debit Card\n142\n1.20\n    \n      Health Beauty\n    \n    Credit Card\n7,566\n75.85\n    Boleto\n1,860\n18.65\n    Voucher\n389\n3.90\n    Debit Card\n157\n1.57\n    No Specified Method\n3\n0.03\n    \n      Sports Leisure\n    \n    Credit Card\n6,635\n74.18\n    Boleto\n1,772\n19.81\n    Voucher\n411\n4.59\n    Debit Card\n127\n1.42\n    \n      Furniture Decor\n    \n    Credit Card\n6,379\n72.95\n    Boleto\n1,735\n19.84\n    Voucher\n530\n6.06\n    Debit Card\n100\n1.14\n    \n      Computers Accessories\n    \n    Credit Card\n5,436\n67.26\n    Boleto\n2,158\n26.70\n    Voucher\n340\n4.21\n    Debit Card\n148\n1.83\n    \n      Housewares\n    \n    Credit Card\n5,411\n73.57\n    Boleto\n1,326\n18.03\n    Voucher\n505\n6.87\n    Debit Card\n113\n1.54\n    \n      Watches Gifts\n    \n    Credit Card\n4,858\n78.34\n    Boleto\n1,025\n16.53\n    Voucher\n255\n4.11\n    Debit Card\n63\n1.02\n    \n      Telephony\n    \n    Credit Card\n3,400\n72.02\n    Boleto\n1,022\n21.65\n    Voucher\n219\n4.64\n    Debit Card\n80\n1.69\n    \n      Toys\n    \n    Credit Card\n3,294\n77.09\n    Boleto\n735\n17.20\n    Voucher\n199\n4.66\n    Debit Card\n45\n1.05\n    \n      Auto\n    \n    Credit Card\n3,277\n74.83\n    Boleto\n840\n19.18\n    Voucher\n190\n4.34\n    Debit Card\n72\n1.64\n    \n      Garden Tools\n    \n    Credit Card\n3,206\n70.09\n    Boleto\n1,032\n22.56\n    Voucher\n267\n5.84\n    Debit Card\n69\n1.51\n    \n      Cool Stuff\n    \n    Credit Card\n2,977\n74.67\n    Boleto\n731\n18.33\n    Voucher\n240\n6.02\n    Debit Card\n39\n0.98\n    \n      Perfumery\n    \n    Credit Card\n2,706\n76.01\n    Boleto\n591\n16.60\n    Voucher\n215\n6.04\n    Debit Card\n48\n1.35\n    \n      Baby\n    \n    Credit Card\n2,426\n75.91\n    Boleto\n554\n17.33\n    Voucher\n172\n5.38\n    Debit Card\n44\n1.38\n    \n      Electronics\n    \n    Credit Card\n2,023\n71.11\n    Boleto\n652\n22.92\n    Voucher\n99\n3.48\n    Debit Card\n71\n2.50\n    \n      Stationery\n    \n    Credit Card\n1,978\n75.58\n    Boleto\n466\n17.81\n    Voucher\n135\n5.16\n    Debit Card\n38\n1.45\n    \n      NA\n    \n    Credit Card\n1,750\n69.22\n    Boleto\n488\n19.30\n    Voucher\n251\n9.93\n    Debit Card\n36\n1.42\n    Not Defined\n3\n0.12\n    \n      Fashion Bags Accessories\n    \n    Credit Card\n1,529\n71.08\n    Boleto\n422\n19.62\n    Voucher\n170\n7.90\n    Debit Card\n30\n1.39\n    \n      Pet Shop\n    \n    Credit Card\n1,526\n75.25\n    Boleto\n366\n18.05\n    Voucher\n102\n5.03\n    Debit Card\n34\n1.68\n    \n      Office Furniture\n    \n    Credit Card\n1,194\n67.15\n    Boleto\n482\n27.11\n    Voucher\n89\n5.01\n    Debit Card\n13\n0.73\n    \n      Luggage Accessories\n    \n    Credit Card\n890\n76.53\n    Boleto\n166\n14.27\n    Voucher\n94\n8.08\n    Debit Card\n13\n1.12\n    \n      Consoles Games\n    \n    Credit Card\n869\n72.96\n    Boleto\n243\n20.40\n    Voucher\n61\n5.12\n    Debit Card\n18\n1.51\n    \n      Construction Tools Construction\n    \n    Credit Card\n729\n76.66\n    Boleto\n181\n19.03\n    Voucher\n25\n2.63\n    Debit Card\n16\n1.68\n    \n      Home Appliances\n    \n    Credit Card\n617\n78.30\n    Boleto\n136\n17.26\n    Voucher\n27\n3.43\n    Debit Card\n8\n1.02\n    \n      Small Appliances\n    \n    Credit Card\n538\n76.75\n    Boleto\n127\n18.12\n    Voucher\n25\n3.57\n    Debit Card\n11\n1.57\n    \n      Musical Instruments\n    \n    Credit Card\n506\n70.47\n    Boleto\n152\n21.17\n    Voucher\n50\n6.96\n    Debit Card\n10\n1.39\n    \n      Home Construction\n    \n    Credit Card\n484\n76.34\n    Boleto\n111\n17.51\n    Voucher\n34\n5.36\n    Debit Card\n5\n0.79\n    \n      Books General Interest\n    \n    Credit Card\n410\n72.57\n    Boleto\n130\n23.01\n    Voucher\n17\n3.01\n    Debit Card\n8\n1.42\n    \n      Furniture Living Room\n    \n    Credit Card\n399\n75.57\n    Boleto\n90\n17.05\n    Voucher\n30\n5.68\n    Debit Card\n9\n1.70\n    \n      Food\n    \n    Credit Card\n381\n72.43\n    Boleto\n106\n20.15\n    Voucher\n20\n3.80\n    Debit Card\n19\n3.61\n    \n      Home Confort\n    \n    Credit Card\n346\n72.84\n    Boleto\n76\n16.00\n    Voucher\n47\n9.89\n    Debit Card\n6\n1.26\n    \n      Drinks\n    \n    Credit Card\n300\n77.72\n    Boleto\n65\n16.84\n    Debit Card\n14\n3.63\n    Voucher\n7\n1.81\n    \n      Audio\n    \n    Credit Card\n263\n69.21\n    Boleto\n84\n22.11\n    Voucher\n25\n6.58\n    Debit Card\n8\n2.11\n    \n      Air Conditioning\n    \n    Credit Card\n222\n73.51\n    Boleto\n69\n22.85\n    Voucher\n8\n2.65\n    Debit Card\n3\n0.99\n    \n      Market Place\n    \n    Credit Card\n222\n66.87\n    Boleto\n80\n24.10\n    Voucher\n27\n8.13\n    Debit Card\n3\n0.90\n    \n      Kitchen Dining Laundry Garden Furniture\n    \n    Credit Card\n219\n73.49\n    Boleto\n53\n17.79\n    Voucher\n20\n6.71\n    Debit Card\n6\n2.01\n    \n      Fashion Shoes\n    \n    Credit Card\n215\n78.47\n    Boleto\n39\n14.23\n    Voucher\n17\n6.20\n    Debit Card\n3\n1.09\n    \n      Construction Tools Lights\n    \n    Credit Card\n214\n68.37\n    Boleto\n73\n23.32\n    Debit Card\n14\n4.47\n    Voucher\n12\n3.83\n    \n      Industry Commerce And Business\n    \n    Credit Card\n205\n75.65\n    Boleto\n59\n21.77\n    Voucher\n4\n1.48\n    Debit Card\n3\n1.11\n    \n      Books Technical\n    \n    Credit Card\n196\n72.59\n    Boleto\n66\n24.44\n    Debit Card\n5\n1.85\n    Voucher\n3\n1.11\n    \n      Food Drink\n    \n    Credit Card\n194\n67.13\n    Boleto\n77\n26.64\n    Voucher\n15\n5.19\n    Debit Card\n3\n1.04\n    \n      Costruction Tools Garden\n    \n    Credit Card\n191\n77.96\n    Boleto\n46\n18.78\n    Voucher\n7\n2.86\n    Debit Card\n1\n0.41\n    \n      Fixed Telephony\n    \n    Credit Card\n186\n68.63\n    Boleto\n72\n26.57\n    Voucher\n10\n3.69\n    Debit Card\n3\n1.11\n    \n      Home Appliances 2\n    \n    Credit Card\n185\n69.03\n    Boleto\n46\n17.16\n    Voucher\n31\n11.57\n    Debit Card\n6\n2.24\n    \n      Computers\n    \n    Credit Card\n174\n79.09\n    Boleto\n34\n15.45\n    Voucher\n12\n5.45\n    \n      Art\n    \n    Credit Card\n153\n69.86\n    Boleto\n47\n21.46\n    Voucher\n13\n5.94\n    Debit Card\n6\n2.74\n    \n      Agro Industry And Commerce\n    \n    Credit Card\n145\n57.54\n    Boleto\n60\n23.81\n    Voucher\n42\n16.67\n    Debit Card\n5\n1.98\n    \n      Construction Tools Safety\n    \n    Credit Card\n145\n72.86\n    Boleto\n46\n23.12\n    Voucher\n6\n3.02\n    Debit Card\n2\n1.01\n    \n      Signaling And Security\n    \n    Credit Card\n131\n65.17\n    Boleto\n62\n30.85\n    Voucher\n5\n2.49\n    Debit Card\n3\n1.49\n    \n      Christmas Supplies\n    \n    Credit Card\n120\n77.42\n    Boleto\n32\n20.65\n    Voucher\n2\n1.29\n    Debit Card\n1\n0.65\n    \n      Fashion Male Clothing\n    \n    Credit Card\n104\n71.72\n    Boleto\n24\n16.55\n    Voucher\n16\n11.03\n    Debit Card\n1\n0.69\n    \n      Fashion Underwear Beach\n    \n    Credit Card\n101\n70.14\n    Boleto\n27\n18.75\n    Voucher\n15\n10.42\n    Debit Card\n1\n0.69\n    \n      Costruction Tools Tools\n    \n    Credit Card\n78\n74.29\n    Boleto\n23\n21.90\n    Voucher\n3\n2.86\n    Debit Card\n1\n0.95\n    \n      Furniture Bedroom\n    \n    Credit Card\n76\n60.80\n    Boleto\n30\n24.00\n    Voucher\n18\n14.40\n    Debit Card\n1\n0.80\n    \n      Small Appliances Home Oven And Coffee\n    \n    Credit Card\n65\n83.33\n    Boleto\n9\n11.54\n    Voucher\n3\n3.85\n    Debit Card\n1\n1.28\n    \n      Tablets Printing Image\n    \n    Credit Card\n65\n74.71\n    Boleto\n18\n20.69\n    Voucher\n4\n4.60\n    \n      Dvds Blu Ray\n    \n    Credit Card\n48\n67.61\n    Boleto\n15\n21.13\n    Voucher\n8\n11.27\n    \n      Books Imported\n    \n    Credit Card\n46\n74.19\n    Boleto\n14\n22.58\n    Voucher\n2\n3.23\n    \n      Cine Photo\n    \n    Credit Card\n45\n61.64\n    Boleto\n23\n31.51\n    Debit Card\n3\n4.11\n    Voucher\n2\n2.74\n    \n      Fashio Female Clothing\n    \n    Credit Card\n35\n72.92\n    Boleto\n12\n25.00\n    Voucher\n1\n2.08\n    \n      Furniture Mattress And Upholstery\n    \n    Credit Card\n33\n80.49\n    Boleto\n6\n14.63\n    Voucher\n2\n4.88\n    \n      Diapers And Hygiene\n    \n    Credit Card\n32\n82.05\n    Boleto\n7\n17.95\n    \n      Party Supplies\n    \n    Credit Card\n30\n65.22\n    Boleto\n11\n23.91\n    Voucher\n3\n6.52\n    Debit Card\n2\n4.35\n    \n      Music\n    \n    Credit Card\n28\n70.00\n    Boleto\n9\n22.50\n    Voucher\n3\n7.50\n    \n      Flowers\n    \n    Credit Card\n26\n78.79\n    Boleto\n7\n21.21\n    \n      Home Comfort 2\n    \n    Credit Card\n23\n74.19\n    Boleto\n6\n19.35\n    Voucher\n2\n6.45\n    \n      Fashion Sport\n    \n    Credit Card\n17\n56.67\n    Boleto\n12\n40.00\n    Voucher\n1\n3.33\n    \n      Arts And Craftmanship\n    \n    Credit Card\n14\n58.33\n    Boleto\n7\n29.17\n    Debit Card\n3\n12.50\n    \n      La Cuisine\n    \n    Credit Card\n13\n81.25\n    Voucher\n2\n12.50\n    Boleto\n1\n6.25\n    \n      Cds Dvds Musicals\n    \n    Credit Card\n9\n64.29\n    Boleto\n5\n35.71\n    \n      Portateis Cozinha E Preparadores De Alimentos\n    \n    Credit Card\n8\n53.33\n    Boleto\n5\n33.33\n    Debit Card\n2\n13.33\n    \n      Fashion Childrens Clothes\n    \n    Credit Card\n5\n62.50\n    Boleto\n3\n37.50\n    \n      Pc Gamer\n    \n    Credit Card\n5\n50.00\n    Boleto\n2\n20.00\n    Debit Card\n2\n20.00\n    Voucher\n1\n10.00\n    \n      Security And Services\n    \n    Boleto\n1\n50.00\n    Credit Card\n1\n50.00\n  \n  \n  \n\n\n\n\nfindings:: across the top product categories the preference of payment method remains the same with credit card taking first choice followed by boleto, voucher and debit card. credit card is been used 71.5% on average across all products.\n\n\nBy geographic region\n\norders |>\n  left_join(order_payment, by = \"order_id\") |>\n  left_join(order_items, by = \"order_id\") |>\n  left_join(customers, by = \"customer_id\") |>\n  \n  group_by(customer_state, payment_type) |>\n  summarise(count = n()) |>\n  arrange(desc(count), customer_state, desc(count)) |>\n  mutate(prop_payment_type = proportions(count)*100,\n         payment_type = if_else(is.na(payment_type), \"No Specified Method\", payment_type)) |>\n  \n  clean_names(c(\"c\", \"Payment Method\", \"Orders\", \"(%) by Paymant Method\")) |>\n  gt() |>\n  fmt_integer(columns = Orders) |>\n  fmt_number(columns = `(%) by Paymant Method`) |>\n  tab_options(column_labels.font.size = 15,\n              column_labels.font.weight = \"bold\",\n              row_group.background.color = \"#FAFAFA\",\n              row_group.font.size = 13)\n\nWarning in left_join(left_join(orders, order_payment, by = \"order_id\"), : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 14 of `x` matches multiple rows in `y`.\nℹ Row 100786 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n`summarise()` has grouped output by 'customer_state'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n  \n    \n    \n      Payment Method\n      Orders\n      (%) by Paymant Method\n    \n  \n  \n    \n      SP\n    \n    Credit Card\n36,716\n73.48\n    Boleto\n9,578\n19.17\n    Voucher\n2,800\n5.60\n    Debit Card\n867\n1.74\n    Not Defined\n3\n0.01\n    No Specified Method\n3\n0.01\n    \n      RJ\n    \n    Credit Card\n11,703\n75.89\n    Boleto\n2,532\n16.42\n    Voucher\n976\n6.33\n    Debit Card\n209\n1.36\n    \n      MG\n    \n    Credit Card\n10,236\n74.51\n    Boleto\n2,707\n19.70\n    Voucher\n644\n4.69\n    Debit Card\n151\n1.10\n    \n      RS\n    \n    Credit Card\n4,542\n69.65\n    Boleto\n1,599\n24.52\n    Voucher\n302\n4.63\n    Debit Card\n78\n1.20\n    \n      PR\n    \n    Credit Card\n4,343\n72.18\n    Boleto\n1,298\n21.57\n    Voucher\n299\n4.97\n    Debit Card\n77\n1.28\n    \n      SC\n    \n    Credit Card\n3,110\n71.86\n    Boleto\n1,002\n23.15\n    Voucher\n167\n3.86\n    Debit Card\n49\n1.13\n    \n      BA\n    \n    Credit Card\n3,006\n73.84\n    Boleto\n707\n17.37\n    Voucher\n304\n7.47\n    Debit Card\n54\n1.33\n    \n      DF\n    \n    Credit Card\n1,922\n77.22\n    Boleto\n450\n18.08\n    Voucher\n99\n3.98\n    Debit Card\n18\n0.72\n    \n      GO\n    \n    Credit Card\n1,775\n72.66\n    Boleto\n515\n21.08\n    Voucher\n127\n5.20\n    Debit Card\n26\n1.06\n    \n      ES\n    \n    Credit Card\n1,733\n73.84\n    Boleto\n471\n20.07\n    Voucher\n116\n4.94\n    Debit Card\n27\n1.15\n    \n      PE\n    \n    Credit Card\n1,469\n77.56\n    Boleto\n300\n15.84\n    Voucher\n104\n5.49\n    Debit Card\n21\n1.11\n    \n      CE\n    \n    Credit Card\n1,225\n78.53\n    Boleto\n226\n14.49\n    Voucher\n89\n5.71\n    Debit Card\n20\n1.28\n    \n      PA\n    \n    Credit Card\n813\n72.46\n    Boleto\n234\n20.86\n    Voucher\n54\n4.81\n    Debit Card\n21\n1.87\n    \n      MT\n    \n    Credit Card\n779\n69.00\n    Boleto\n272\n24.09\n    Voucher\n71\n6.29\n    Debit Card\n7\n0.62\n    \n      MS\n    \n    Credit Card\n602\n70.91\n    Boleto\n200\n23.56\n    Voucher\n34\n4.00\n    Debit Card\n13\n1.53\n    \n      MA\n    \n    Credit Card\n580\n68.16\n    Boleto\n240\n28.20\n    Voucher\n26\n3.06\n    Debit Card\n5\n0.59\n    \n      PB\n    \n    Credit Card\n478\n74.34\n    Boleto\n114\n17.73\n    Voucher\n38\n5.91\n    Debit Card\n13\n2.02\n    \n      RN\n    \n    Credit Card\n435\n76.05\n    Boleto\n89\n15.56\n    Voucher\n39\n6.82\n    Debit Card\n9\n1.57\n    \n      PI\n    \n    Credit Card\n422\n73.39\n    Boleto\n110\n19.13\n    Voucher\n32\n5.57\n    Debit Card\n11\n1.91\n    \n      AL\n    \n    Credit Card\n370\n80.43\n    Boleto\n72\n15.65\n    Voucher\n13\n2.83\n    Debit Card\n5\n1.09\n    \n      SE\n    \n    Credit Card\n289\n71.71\n    Boleto\n85\n21.09\n    Voucher\n23\n5.71\n    Debit Card\n6\n1.49\n    \n      TO\n    \n    Credit Card\n228\n67.06\n    Boleto\n81\n23.82\n    Voucher\n27\n7.94\n    Debit Card\n4\n1.18\n    \n      RO\n    \n    Credit Card\n206\n70.55\n    Boleto\n75\n25.68\n    Voucher\n8\n2.74\n    Debit Card\n3\n1.03\n    \n      AM\n    \n    Credit Card\n137\n79.65\n    Boleto\n26\n15.12\n    Voucher\n7\n4.07\n    Debit Card\n2\n1.16\n    \n      AC\n    \n    Credit Card\n72\n75.79\n    Boleto\n16\n16.84\n    Voucher\n5\n5.26\n    Debit Card\n2\n2.11\n    \n      AP\n    \n    Credit Card\n57\n67.86\n    Boleto\n24\n28.57\n    Voucher\n3\n3.57\n    \n      RR\n    \n    Credit Card\n38\n73.08\n    Boleto\n14\n26.92\n  \n  \n  \n\n\n\n\nfindings:: No changes in the order of preference as the generally summary.\n\n\n\n\nSellers\n\nHow many sellers are active on Olist, and how does this number change over time?\n\nActive sellers\n\nsellers |> \n  summarise(number_of_sellers = n_distinct(seller_id)) |>\n  \n  clean_names() |>\n  gt() |>\n  fmt_integer() |>\n  cols_align(align = \"center\") |>\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            locations = cells_body())\n\n\n\n\n\n  \n    \n    \n      Number Of Sellers\n    \n  \n  \n    3,095\n  \n  \n  \n\n\n\n\nfinding:: There were 3,095 registered sellers during the period of --2016 & --2018.\n\norders |> \n  left_join(select(order_items, order_id, seller_id), by = \"order_id\") |>\n  left_join(sellers, by = \"seller_id\") |>\n  \n  select(order_id,  seller_id, order_purchase_timestamp) |>\n  mutate(order_date = date(order_purchase_timestamp),\n         order_year = year(order_purchase_timestamp)) |>\n  group_by(order_date, order_year) |>\n  summarise(number_of_sellers = n_distinct(seller_id)) |>\n  \n  ggplot(aes(x = order_date, y = number_of_sellers)) +\n  geom_line(color = color_line) +\n  facet_wrap(vars(order_year), ncol = 1, scales = \"free\") +\n  labs(x = \"Date\", \n       y = \"No. Sellers\", \n       title = \"Number of Active Sellers on Olist\") +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9),\n        axis.text.x = element_text(size = 8))\n\n`summarise()` has grouped output by 'order_date'. You can override using the\n`.groups` argument.\n\n\n\n\n\nfindings:: The number of active sellers on olist in 2017 saw less variability than in 2018, this also follow the amount of order and revenue generated during does period. in 2016 there were 146 active sellers, in 2017 1,785 and 2018 2,384.\n\n\n\nWhat is the distribution of customer ratings on Olist, and how does this impact sales performance?\n\nsummary(reviews$review_score) |> \n  as.list() |> \n  as.data.frame() |>\n  clean_names(c(\"Minimum\", \"1st Quarter\", \"Median\", \"Mean\", \"3rd Quarter\", \"Maximum\")) |>\n  gt() |>\n  fmt_number(columns = Mean) |>\n  cols_align(align = \"center\") \n\n\n\n\n\n  \n    \n    \n      Minimum\n      1st Quarter\n      Median\n      Mean\n      3rd Quarter\n      Maximum\n    \n  \n  \n    1\n4\n5\n4.09\n5\n5\n  \n  \n  \n\n\n\n\n\nggplot(reviews, aes(x = review_score)) +\n  geom_boxplot() +\n  labs(x = \"Score\", title = \"Review Score Distribution\") +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 13),\n        axis.title.x = element_text(color = color_axis_title),\n        axis.text.y = element_blank())\n\n\n\n\nfinding:: the rating ranges from 1 to 5 with 5 been the best rating and 1 been the worst, the average rating is 4 which indicate that majority of customers where satisfied with their order and the whole transaction.\n\nsales performance\n\norders |>\n  left_join(order_payment, by = \"order_id\") |>\n  left_join(reviews, by = \"order_id\") |>\n  \n  group_by(review_score) |>\n  \n  summarise(count = n(),\n            minimum = min(payment_value, na.rm = TRUE),\n            median = median(payment_value, na.rm = TRUE),\n            maximum = max(payment_value, na.rm = TRUE),\n            total = sum(payment_value, na.rm = TRUE)) |>\n  arrange(desc(review_score)) |>\n\n  clean_names() |>\n  gt() |>\n  fmt_number() |>\n  fmt_integer(columns = c(`Review Score`, Count)) |>\n  gt_fa_rating(`Review Score`, color = \"#000000\", icon = \"star\") |>\n  tab_spanner(label = \"Revenue\", columns = Minimum:Total) |>\n  tab_style(style = cell_fill(color = color_highlight),\n            locations = cells_body(columns = Total))\n\nWarning in left_join(left_join(orders, order_payment, by = \"order_id\"), : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 428 of `x` matches multiple rows in `y`.\nℹ Row 32791 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n  \n    \n    \n      Review Score\n      Count\n      \n        Revenue\n      \n    \n    \n      Minimum\n      Median\n      Maximum\n      Total\n    \n  \n  \n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n59,822\n0.00\n98.38\n6,929.31\n8,955,199.96\n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n20,008\n0.00\n97.81\n4,764.34\n2,960,722.31\n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n8,543\n0.00\n97.76\n3,242.84\n1,239,884.94\n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n3,330\n0.17\n104.85\n3,360.66\n544,035.58\n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n11,975\n0.00\n113.34\n13,664.08\n2,231,811.62\n     \n800\n0.14\n110.12\n6,922.21\n149,766.33\n  \n  \n  \n\n\n\n\nfindings:: orders with higher ratings score (5, 4) generated more revenue than those with low ratings Except for those with 1 rating score which generated more revenue on average and in total than orders with 2 & 3 rating score.\n\n\n\n\nCustomers\n\nHow many customers have made repeat purchases on Olist, and what percentage of total sales do they account for?\n\nNumber of returned customers\n\norders |>\n  left_join(customers, by = \"customer_id\") |>\n  \n  group_by(customer_unique_id) |>\n  summarise(count = n_distinct(order_id)) |>\n  mutate(percentage = proportions(count)*100) |>\n  arrange(desc(count)) |>\n  filter(count > 1) |>\n  summarise(total_customers = n_distinct(customer_unique_id),\n            percentage_customer = sum(percentage)) |>\n  \n  clean_names(c(\"Total Customers\", \"Percentage of All Customers\")) |>\n  gt() |>\n  cols_align(\"center\") |>\n  fmt_integer(columns = `Total Customers`) |>\n  fmt_number(columns = `Percentage of All Customers`) |>\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            location = cells_body(columns = `Percentage of All Customers`))\n\n\n\n\n\n  \n    \n    \n      Total Customers\n      Percentage of All Customers\n    \n  \n  \n    2,997\n6.38\n  \n  \n  \n\n\n\n\nfindings:: a total of 2,997 unique customers are repeated purchasers on Olist which is just 6.38% of all customers who have made an order so far\n\n\npercentage of total sales\n\norders |>\n  left_join(customers, by = \"customer_id\") |>\n  left_join(order_payment, by = \"order_id\") |>\n  \n  filter(!order_status %in% c(\"canceled\", \"unavailable\")) |>\n  group_by(customer_unique_id) |>\n  summarise(number_of_orders = n_distinct(order_id),\n            total_sales = sum(payment_value, na.rm = TRUE)) |>\n  mutate(percentage = (total_sales / sum(total_sales))*100 ) |>\n  filter(number_of_orders > 1) |>\n  summarise(total_sales = sum(total_sales),\n            total_percentage = sum(percentage, na.rm = TRUE)) |>\n  \n  clean_names(c(\"Total Sales\", \"Percentage of Total Sales\")) |>\n  gt() |>\n  fmt_number() |>\n  cols_align(\"center\") |>\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            location = cells_body(columns = `Percentage of Total Sales`))\n\n\n\n\n\n  \n    \n    \n      Total Sales\n      Percentage of Total Sales\n    \n  \n  \n    890,534.12\n5.66\n  \n  \n  \n\n\n\n\nfinding:: about 94.1% of sales on Olist are from customers making their first purchase and only 5.90 of sales was generated by repeated customers.\n\n\n\nWhat is the average customer rating for products sold on Olist, and [how does this impact sales performance?]\n\norders |> \n  left_join(reviews, by = \"order_id\") |>\n  left_join(order_items, by = \"order_id\") |>\n  left_join(products, by = \"product_id\") |>\n  \n  group_by(product_id) |>\n  summarise(avg_rating = median(review_score, na.rm = TRUE)) |>\n  \n  ggplot(aes(x = avg_rating)) +\n  geom_bar(color = \"white\") +\n  labs(x = \"Rating\", \n       y = \"Count\", \n       title = \"Distribution of Median Rating Score by Product\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title))\n\nWarning in left_join(left_join(orders, reviews, by = \"order_id\"), order_items, : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 11 of `x` matches multiple rows in `y`.\nℹ Row 75750 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nWarning: Removed 162 rows containing non-finite values (`stat_count()`).\n\n\n\n\n\nfinding:: More products had high review according to the chart above."
  },
  {
    "objectID": "posts/Olist-Analysis/index.html",
    "href": "posts/Olist-Analysis/index.html",
    "title": "Historical Analysis of Olist E-Commerce Platform",
    "section": "",
    "text": "Olist is an e-commerce platform based in Brazil that connect both small and medium sized businesses to customers through a single marketplace. It offers a range of features and services to help sellers grow their businesses, including free online store, integrated shipping and logistics, and access to a large customer base.\nAn historical analysis dating back from September 2016 to October 2018 will be performed to help us gain insight into the performance of the platform. The goal is to identify trends, patterns and relationships that can inform future decision-making and help improve overall performance."
  },
  {
    "objectID": "posts/Olist-Analysis/index.html#libraries",
    "href": "posts/Olist-Analysis/index.html#libraries",
    "title": "Historical Analysis of Olist E-Commerce Platform",
    "section": "Libraries",
    "text": "Libraries\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(rvest)"
  },
  {
    "objectID": "posts/Olist-Analysis/index.html#importing-data",
    "href": "posts/Olist-Analysis/index.html#importing-data",
    "title": "Historical Analysis of Olist E-Commerce Platform",
    "section": "Importing data",
    "text": "Importing data\nThe dataset contains details of more than 90K orders, it include multiple variables such as unique order id, price, payment, status, customer, sellers, review score and so more, grouped into different tables for easy storage and analysis.\nThe file for all the needed data for this analysis can be found on kaggle.\n\ncsv_name &lt;- c(\n  \"customers\", \n  \"order_items\", \n  \"order_payments\", \n  \"order_reviews\", \n  \"orders\",\n  \"product_category_name\",\n  \"products\",\n  \"sellers\"\n)\n\nall_datasets &lt;- map(\n  csv_name, \\(table) read_csv(glue::glue(\"data/olist_{table}_dataset.csv\"))\n)\nnames(all_datasets) &lt;- csv_name\n\n\norders &lt;- all_datasets$orders\norder_items &lt;- all_datasets$order_items\norder_payment &lt;- all_datasets$order_payments\nproducts &lt;- all_datasets$products\nproduct_category_name &lt;- all_datasets$product_category_name\ncustomers &lt;- all_datasets$customers\nsellers &lt;- all_datasets$sellers\nreviews &lt;- all_datasets$order_reviews\n\nrm(all_datasets)\n\n\nHelper functions\n\n\nCode\nclean_names &lt;- function(data, new_names = NULL) {\n  if (is.null(new_names)) {\n    data |&gt;\n      dplyr::rename_with(\n        \\(c) stringr::str_replace_all(c, \"_\", \" \") |&gt; stringr::str_to_title()\n      )\n  } else {\n    \n    names(data) &lt;- new_names\n    \n    return(data)\n  }\n}\n\ninteractive_gt &lt;- function(table, sort = FALSE, filter = FALSE) {\n  gt::opt_interactive(\n    table,\n    use_pagination_info = FALSE, \n    use_sorting = sort,\n    use_filters = filter,\n    pagination_type = \"simple\"\n  )\n    \n}\n\nunique_sum &lt;- function(var) {\n  unq &lt;- unique(var)\n  \n  if (length(unq) &gt; 1) {\n    sum(unq, na.rm = TRUE)\n    \n  } else {\n    unq\n  }\n}\n\n\n\n\nCode\ncolor_line &lt;- \"#3B3B3B\"\ncolor_title &lt;- \"#5C5C5C\"\ncolor_axis_title &lt;- \"#4D4D4D\"\ncolor_highlight &lt;- \"#F7F7F7\"\ncolor_bold &lt;- \"#888888\""
  },
  {
    "objectID": "posts/Olist-Analysis/index.html#data-cleaning",
    "href": "posts/Olist-Analysis/index.html#data-cleaning",
    "title": "Historical Analysis of Olist E-Commerce Platform",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nThe product category name variable will be converted from Portuguese to English, a minor string formatting for the payment type variable. Also customer state will be transform from the two letter abbreviations to the full names and their respective regions will be added.\n\n\nCode\nlvls &lt;- product_category_name$product_category_name\nnames(lvls) &lt;- product_category_name$product_category_name_english\n\nproducts &lt;- products |&gt;\n  mutate(\n    product_category_name = as_factor(product_category_name),\n    product_category_name = fct_recode(product_category_name, !!!lvls),\n    product_category_name = str_replace_all(product_category_name, \"_\", \" \") |&gt;\n                            str_to_title()\n  ) \n\norder_payment &lt;- order_payment |&gt;\n  mutate(payment_type = str_replace(payment_type, \"_\", \" \") |&gt; str_to_title()) \n\n\n\n\nCode\npage_html &lt;- read_html(\"https://brazil-help.com/brazilian_states.htm\")\n\nstate_name_code &lt;- page_html %&gt;% \n  html_elements(\"table\") %&gt;% \n  map(html_table) %&gt;% \n  .[[28]] %&gt;% \n  select(X1, X2, X4) %&gt;% \n  rename(code = X1, name = X2, region = X4) %&gt;% \n  slice(3:nrow(.)) %&gt;% \n  mutate(across(name:region, \\(x) str_replace_all(x, \"\\\\n\", \" \"))) %&gt;% \n  mutate(region = case_when(region == \"Southeast\" ~ \"South East\",\n                            region == \"Northeast\" ~ \"North East\",\n                            .default = region))\n\nname_code &lt;- state_name_code$code\nnames(name_code) &lt;- state_name_code$name\n\nregion_code &lt;- state_name_code$code\nnames(region_code) &lt;- state_name_code$region\n\ncustomers &lt;- customers |&gt;\n  mutate(customer_state_name = fct_recode(customer_state, !!!name_code),\n         customer_region = fct_recode(customer_state, !!!region_code))"
  },
  {
    "objectID": "posts/Olist-Analysis/index.html#analysis",
    "href": "posts/Olist-Analysis/index.html#analysis",
    "title": "Historical Analysis of Olist E-Commerce Platform",
    "section": "Analysis",
    "text": "Analysis\nIn this analysis of Olist e-commerce platform, the aim is to answer several research questions using R programming language, Also various methods such as trend analysis and data visualization, will be used to explore patterns in the order data over the selected period. the result will be presented in tables and charts, providing insights into trends in sales volume and revenue as well as identifying top-selling products.\n\nRevenue\nThis is the total amount of money earned by all sellers on the e-commerce platform from sales of products from September 2016 to October 2018. It is a key metric, as it reflects their capacity to generate income and grow over time.\n\nWhat was the total revenue generated by Olist, and how has it changed over time?\nWhat is the trend of Olist’s total revenue over time? Specifically, how did Olist’s revenue change from 2016 to 2018.\n\ntemp &lt;- orders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  filter(!order_status %in% c(\"canceled\", \"unavailable\"))\n\n\nTotal revenue generated by olist\n\ntemp |&gt;\n  summarise(total = sum(payment_value, na.rm = TRUE),\n            minimum = min(payment_value, na.rm = TRUE),\n            average = round(mean(payment_value, na.rm = TRUE), 2),\n            maximum = max(payment_value, na.rm = TRUE)) |&gt;\n  add_column(order_purchase_year = \"ALL\", .before = 1) |&gt;\n  bind_rows(\n    temp |&gt;\n      mutate(order_purchase_year = as.character(year(order_purchase_timestamp))) |&gt; \n      group_by(order_purchase_year) |&gt;\n      summarise(total = sum(payment_value, na.rm = TRUE),\n                minimum = min(payment_value, na.rm = TRUE),\n                average = round(mean(payment_value, na.rm = TRUE), 2),\n                maximum = max(payment_value, na.rm = TRUE)) \n  ) |&gt;\n  \n  clean_names() |&gt;\n  gt() |&gt;\n  fmt_number() |&gt;\n  tab_spanner(label = \"Revenue\", columns = Total:Maximum) |&gt;\n  tab_style(style = cell_fill(color = color_highlight),\n            locations = cells_body(columns = Total)) |&gt;\n  tab_style(style = cell_fill(color = color_highlight),\n            locations =  cells_body(rows = 1)) |&gt;\n  tab_style(style = cell_text(weight = \"bold\", color = \"#707070\"), \n            locations = cells_body(`Maximum`, 3))\n\n\n\n\n\n  \n    \n    \n      Order Purchase Year\n      \n        Revenue\n      \n    \n    \n      Total\n      Minimum\n      Average\n      Maximum\n    \n  \n  \n    ALL\n15,739,137.01\n0.00\n153.44\n13,664.08\n    2016\n51,813.38\n0.74\n165.54\n1,423.55\n    2017\n7,092,491.65\n0.00\n151.74\n13,664.08\n    2018\n8,594,831.98\n0.00\n154.81\n7,274.88\n  \n  \n  \n\n\n\n\nAccording to the analysis on revenue data of Olist, a total revenue of 15,739,137 was generated during the period from September 2016 to October 2018. It is worth noting that 2018 was the year with the highest total revenue generated, even though the available dataset contained 10 months in total. On the other hand, 2016 only had 4 months and generated the lowest revenue as expected. Furthermore, the average revenue by order is 153.44, indicating a consistent revenue generation pattern in terms of order volume. The highest single revenue was generated in 2017, which is a noteworthy finding that may suggest a particular factor or event that contributed to the peak revenue in that year. Finally, we observed that the average revenue generated in 2018 is closer to the overall average revenue, implying a relatively stable revenue generation pattern. These findings provide valuable insights into the historical revenue performance of Olist.\n\n\nHow did it change over time.\n\ntemp |&gt;\n  mutate(order_purchase_date = date(order_purchase_timestamp)) |&gt;\n  group_by(order_purchase_date) |&gt;\n  summarise(revenue = sum(payment_value, na.rm = TRUE)) |&gt; \n  \n  ggplot(aes(x = order_purchase_date, y = revenue)) +\n  geom_line(color = color_line) +\n  labs(x = \"Order Purchase Date\", \n       y = \"Revenue\", \n       title = \"Revenue Generated (Sep 2016 - Oct 2018)\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9))\n\n\n\n\nAfter examining the revenue trend chart for the selected years, we can see that the revenue generated by Olist was relatively low in 2016 and declined towards the end of the year. In contrast, revenue increased in the following years, with a peak in 2017. The highest amount of revenue was generated on November 24, 2017, amounting to 178,450. It is interesting to note that revenue generated over time are volatile, especially in 2018. This may suggest that certain factors, such as changes in the market or customer behavior, may have influenced revenue performance during this period. Overall, our analysis suggests that the revenue generated by Olist has shown some fluctuations.\n\n\nBy year\n\ntemp |&gt;\n  mutate(order_purchase_year = year(order_purchase_timestamp),\n         order_purchase_date = date(order_purchase_timestamp)) |&gt;\n  group_by(order_purchase_date, order_purchase_year) |&gt;\n  summarise(revenue = sum(payment_value, na.rm = TRUE)) |&gt;\n  \n  ggplot(aes(x = order_purchase_date, y = revenue)) +\n  geom_line(color = color_line, show.legend = FALSE) +\n  labs(x = NULL, y = NULL, title = \"Revenue Generated by Year Period\") +\n  facet_wrap(vars(order_purchase_year), ncol = 1, scales = \"free\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9),\n        axis.text = element_text(size = 8))\n\n\n\n\nBased on the trend of revenue by year. First, we observed that revenue generated in 2016 fell below 9,000 and reached its peak in October, with a slight dip towards the end of the year. Similarly, in 2017, revenue mostly fell below 50,000, except in November when it reached its highest peak. After November, there was a minor consistent drop in revenue. This suggests that Olist experienced a surge in sales during the holiday season in November, but struggled to maintain that momentum in the following months.\nSecond, we noticed that in 2018, Olist's revenue became more volatile than in the previous years, with the most significant decline in revenue occurring after its highest peak in May-June and also August-September. This volatility could be attributed to changes in market conditions or customer behavior, which could have affected the platform’s revenue generation. It is worth noting that despite the fluctuations, the overall trend showed a relatively stable revenue generation pattern.\nFinally, a common discovery was that revenue generally declined in December in both 2016 and 2017. This could be attributed to the fact that December is typically a slow month for seller on Olist due to the holiday season, as people focus on holiday preparations and travel rather than shopping. Overall, these findings provide valuable insights into the historical revenue performance of Olist.\n\n\n\n\nProducts\nAnalysis of the various products and their categories listed by several sellers on Olist.\n\nWhat are the most popular product categories on Olist, and how do their sales volumes compare to each other?\n\norders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  left_join(select(order_items, order_id, product_id), by = \"order_id\") |&gt;\n  left_join(products, by = \"product_id\") |&gt;\n  filter(!order_status %in% c(\"canceled\", \"unavailable\")) |&gt;\n  distinct() |&gt;\n  \n  group_by(product_category_name) |&gt;\n  summarise(number_order = n_distinct(order_id),\n            total_sales = sum(payment_value, na.rm = TRUE)) |&gt;\n  mutate(product_category_name = case_when(is.na(product_category_name) ~ \"`No Category`\",\n                                           .default = product_category_name),\n         percent_order = round(proportions(number_order)*100, 2),\n         percent_revenue = round(proportions(total_sales)*100, 2)) |&gt;\n  select(product_category_name, \n         number_order, \n         percent_order, \n         total_sales, \n         percent_revenue) |&gt;\n  arrange(desc(total_sales)) |&gt; \n  \n  clean_names(c(\"Product Category\", \n                \"No. order\", \n                \"No. order(%)\",\n                \"Total Sales\",\n                \"Sales(%)\")) |&gt;\n  gt() |&gt;\n  fmt_integer(columns = `No. order`) |&gt;\n  fmt_number(columns = `Total Sales`) |&gt;\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            locations = cells_body(columns = c(`No. order`, `Total Sales`))) |&gt;\n  interactive_gt(filter = TRUE)\n\n\n\n\n\n\n\n\n\nThe analysis of the product data revealed several interesting insights. First, we observed that the most purchased product category on the platform is Health Beauty, with a total of 8,800 purchases. This indicates that Olist’s customers tend to prioritize health beauty essentials when shopping on the platform.\nSecond, the other top five product categories range from Bed Bath Table to computer accessories, with a combined total of 38.5% of all purchased products. This suggests that Olist’s customers have diverse interests and preferences when it comes to shopping for products on the platform.\nFinally, we noticed that Computers Accessories generated more sales in total than Furniture Decor, and together the top 5 product category make up 39.6% of the total sales generated. This indicates that Olist’s customers are willing to spend more on technology and Leisure items, which is useful information for sellers looking to sell similar products on the platform.\n\n\nWhat is the average order value (AOV) on Olist, and how does this vary by product category?\n\nThe Average Order Value\nThe average order value is the average amount of money that customers spend on a single transaction or order.\n\norder_payment |&gt;\n  summarise(total_revenue = sum(payment_value, na.rm = TRUE),\n            number_of_orders = n_distinct(order_id),\n            average_order_value = total_revenue / number_of_orders) |&gt;\n  clean_names() |&gt;\n  gt() |&gt;\n  fmt_number(decimals = 1) |&gt;\n  fmt_integer(columns = `Number Of Orders`) |&gt;\n  tab_style(style = css(\"text-align\" = \"center\"),\n            locations = cells_body()) |&gt;\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            locations = cells_body(columns = `Average Order Value`)) \n\n\n\n\n\n  \n    \n    \n      Total Revenue\n      Number Of Orders\n      Average Order Value\n    \n  \n  \n    16,008,872.1\n99,440\n161.0\n  \n  \n  \n\n\n\n\nBased on the average order summary table presented, it can be observed that out of the 99,440 unique orders made, the overall average order value was 161.0. This means that the average order value for each purchase made on the Olist e-commerce platform for the stipulated time period was 161.0. This value is a useful metric for understanding the average amount of money customers are spending on each order. It could also be used as a benchmark for comparing the performance of Olist to other e-commerce platforms during that period, or for tracking changes in customer spending.\n\n\nAverage order value by products\n\norders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  left_join(select(order_items, order_id, product_id), by = \"order_id\") |&gt;\n  left_join(products, by = \"product_id\") |&gt;\n  distinct() |&gt;\n  \n  group_by(product_category_name) |&gt;\n  summarise(total_revenue = sum(payment_value, na.rm = TRUE),\n            number_of_orders = n_distinct(order_id),\n            average_order_value = total_revenue / number_of_orders) |&gt;\n  arrange(desc(average_order_value)) |&gt;\n  \n  clean_names() |&gt;\n  gt() |&gt;\n  fmt_number(decimals = 1) |&gt;\n  fmt_integer(columns = `Number Of Orders`) |&gt;\n  cols_label(`Product Category Name` = \"Product Category\",\n             `Number Of Orders` = md(\"*No.* Orders\")) |&gt;\n  tab_style(style = cell_fill(color = color_highlight),\n            locations = cells_body(columns = `Average Order Value`)) |&gt;\n  interactive_gt(filter = TRUE)\n\n\n\n\n\n\n\n\n\nThe analysis of average order value by product category reveals that the top 5 product categories with the highest average order value are primarily technology, home appliances, and agricultural tools. This implies that customers are willing to spend more on these categories compared to other categories. With an average order value of 655., these categories are clearly some of the most valuable in terms of generating revenue.\nIt is also possible that sellers on Olist implemented marketing strategies to increase customer spending in these categories.\n\n\n\nWhat where the top-selling products on Olist, and how have their sales trends changed over time?\n\nTop selling product\n\ntemp &lt;- orders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  left_join(order_items, by = \"order_id\", relationship = \"many-to-many\") |&gt;\n  left_join(products, by = \"product_id\") |&gt;\n  \n  filter(!order_status %in% c(\"canceled\", \"unavailable\")) |&gt;\n  group_by(product_id) |&gt;\n  summarise(number_of_order = n_distinct(order_id),\n            total_sales = unique_sum(payment_value)) |&gt;\n  mutate(product_id_label = str_trunc(product_id, width = 12),\n         percentage = proportions(total_sales)*100) |&gt;\n  slice_max(order_by = total_sales, n = 10)\n\n\nggplot(temp, aes(x = total_sales, y = fct_reorder(product_id_label, total_sales))) +\n  geom_col(fill = \"#ABABAB\") +\n  geom_text(aes(label = number_of_order), hjust = 1.2, color = \"#333333\") +\n  labs(x = \"Total Revenue\", \n       y = \"Product Id\", \n       title = \"Top 10 Best Selling Products\",\n       subtitle = \"and Unique Purchase(In text)\") +\n  scale_x_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        plot.subtitle = element_text(color = \"#777777\", size = 10),\n        axis.title = element_text(color = color_axis_title, size = 9))\n\n\n\n\nThe bar chart above for the top 10 highest selling products shows that the highest sales made of any product is 38,803. The top 10 products have an average sales of 25,064, indicating a relatively high level of demand for these products. It is also interesting to note that the number of unique purchases for these products ranges from 19 to 466, suggesting that the products appeal to a diverse group of consumers. Despite the high sales figures, it is worth noting that the total sales ofthe top 10 products make up just 1.83% of all sales generated from 32,730 unique products. This suggests that there is a diverse range of products being sold on the Olist platform and that no single product dominates the market. Overall, this provide insights into consumer behavior and preferences on the Olist platform.\n\n\nSales trend over time\n\norders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  left_join(order_items, by = \"order_id\") |&gt;\n  left_join(products, by = \"product_id\") |&gt;\n  filter(!order_status %in% c(\"canceled\", \"unavailable\"),\n         product_id %in% temp$product_id) |&gt;\n  \n  group_by(order_purchase_timestamp, product_id) |&gt;\n  summarise(total_sales = unique_sum(payment_value)) |&gt;\n  ungroup() |&gt;\n  filter(product_id != \"5769ef0a239114ac3a854af00df129e4\") |&gt;\n  \n  ggplot(aes(x = order_purchase_timestamp,\n             y = total_sales,\n             group = 1)) +\n  geom_line(show.legend = FALSE) +\n  facet_wrap(facets = vars(product_id), ncol = 2, scales = \"free_y\") +\n  labs(x = \"Purchase Date\", \n       y = \"revenue\", \n       title = \"Top Product Sales Over Time\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(colour = color_title, size = 11),\n        axis.title = element_text(colour = color_axis_title, size = 8),\n        axis.text = element_text(size = 8))\n\n\n\n\nThe above trend plot on sales across the stipulated period provides valuable insights into the sales patterns of the top 10 products. One noticeable observation is the presence of both high and low variability in sales across the products. Some products experienced significant fluctuations in sales over time, while others had more stable sales patterns. Another important point to note is that the frequency of purchase varies significantly across the top 10 products. Some products were purchased only a few times over the period, while others were purchased across many periods. Additionally, all products were purchased from 2017 upwards. Overall, the trend plot provides a useful summary of sales patterns over time for the top 10 products.\n\n\n\n\nOrders\n\nHow many orders were placed on Olist, and how does this vary by month or season?\n\ntemp &lt;- orders |&gt; \n  mutate(order_day = day(order_purchase_timestamp),\n         order_month = month(order_purchase_timestamp, label= TRUE, abbr= TRUE),\n         order_year = year(order_purchase_timestamp),\n         order_date = date(order_purchase_timestamp))\n\n\ntemp |&gt;\n  group_by(order_day, order_year) |&gt;\n  summarise(number_of_orders = n()) |&gt; \n  \n  ggplot(aes(x = order_day, \n             y = number_of_orders, \n             group = 1)) +\n  geom_line(color = color_line, show.legend = FALSE) +\n  facet_wrap(vars(order_year), ncol = 1, scales = \"free_y\") +\n  labs(x = \"Days of the Month\",\n       y = \"No. Orders\",\n       title = \"Number Of Orders in Each Day\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  scale_x_continuous(breaks = seq(1, 31, 2)) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9))\n\n\n\n\nThe plot above provides insight into the number of orders placed on Olist platform over the years. From the plot, it is clear that there was a low number of orders in 2016 compared to the subsequent years. In 2017, the average number of orders per day was 1,455, with the highest number of orders occurring on the 24th day. The trend for 2018 was slightly different, with an average number of orders per day of 1,742. The most orders on a particular day in 2018 happened on the 16th day, after which the number of orders steadily declined down to the 31st day. These trends in the number of orders over time provides useful insights to Olist platform in terms of past demands and planning for inventory management.\n\nBy month\n\ntemp |&gt;\n  group_by(order_month, order_year) |&gt;\n  summarise(number_of_orders = n()) |&gt;\n  \n  ggplot(aes(x = order_month, \n             y = number_of_orders, \n             group = 1)) +\n  geom_line(color = color_line, show.legend = FALSE) +\n  facet_wrap(vars(order_year), ncol = 1, scales = \"free_y\") +\n  labs(x = NULL,\n       y = \"No. Orders\",\n       title = \"Orders Volume by Month\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9))\n\n\n\n\nThe analysis of the total number of orders made in each month across all years shows an interesting trend. There was a steady increase in the total number of orders made in 2017 except for some months such as April, June, and December when the number of orders declined. This could be attributed to seasonal factors, as December is typically a month where people are focused on holiday preparations and less on making purchases. In contrast, 2018 saw a steep decline in the total number of orders from April to September, with the biggest decline happening from August to September where there was a difference of 6,496 orders. This significant decline suggests that there might have been external factors that affected customer behavior during this period. It could be worthwhile to investigate if there was any significant event or change that happened during that time that could have influenced customer purchase behavior.\n\n\nBy date\n\ntemp |&gt;\n  group_by(order_date, order_year) |&gt;\n  summarise(number_of_orders = n()) |&gt;\n  \n  ggplot(aes(x = order_date, \n             y = number_of_orders, \n             group = 1)) +\n  geom_line(color = color_line, show.legend = FALSE) +\n  facet_wrap(vars(order_year), ncol = 1, scales = \"free\") +\n  labs(x = \"Order Date\", \n       y = \"No. Order\",\n       title = \"Orders Volume\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9),\n        axis.text.x = element_text(size = 8))\n\n\n\n\nThe plot on total orders across each year shows a similar trend to that of the total amount of sales generated. Just like the amount of sales, the total number of orders also exhibits a seasonal trend. There was a significant increase in orders in the last quarter of 2017, with the peak occurring in November from 23rd to 29th. The highest number of orders for this period was recorded on the 24th, which was the Black Friday sales day. However, this peak period was relatively short-lived, and the number of orders declined sharply after that week. The trend for 2018 was also similar, with a high number of orders in the second and third quarter, followed by a significant decline from August to October. This volatility is consistent with the trend observed for the total amount of sales during the stipulated period, suggesting that the number of orders is a good indicator of sales performance for the Olist e-commerce platform.\n\n\n\nWhat is the average order cancellation rate on Olist, and how does this impact seller performance?.\nBefore running the analysis for the average rate of order cancellation, a summary of the distribution of order status can provide more insight into the number of orders.\n\norders |&gt;\n  count(order_status, sort = TRUE, name = \"number_of_order\") |&gt;\n  mutate(percentage = proportions(number_of_order)*100,\n         order_status = str_to_title(order_status)) |&gt;\n  \n  clean_names() |&gt;\n  gt(rowname_col = \"Order Status\") |&gt;\n  fmt_number(columns = `Number Of Order`, decimals = 0) |&gt;\n  fmt_number(columns = Percentage) |&gt;\n  cols_label(`Number Of Order` = md(\"*No.* Order\"))\n\n\n\n\n\n  \n    \n    \n      \n      No. Order\n      Percentage\n    \n  \n  \n    Delivered\n96,478\n97.02\n    Shipped\n1,107\n1.11\n    Canceled\n625\n0.63\n    Unavailable\n609\n0.61\n    Invoiced\n314\n0.32\n    Processing\n301\n0.30\n    Created\n5\n0.01\n    Approved\n2\n0.00\n  \n  \n  \n\n\n\n\nBased on the order status summary, it appears that the majority of orders (97%) were delivered successfully to customers. This suggests that the company has a strong delivery process in place, which is crucial for customer satisfaction and loyalty. However, it is worth noting that a small percentage of orders (0.63%) were canceled, which could be due to various reasons such as stock unavailability or customer requests. Additionally, 0.61% of orders were unavailable, which could indicate that there where some flaws in inventory management system that prevented the availability of products for customers to purchase.\n\norders |&gt;\n  left_join(order_items, by = \"order_id\") |&gt;\n  left_join(sellers, by = \"seller_id\") |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  distinct() |&gt;\n\n  group_by(seller_id, order_status) |&gt;\n  summarise(count = n(),\n            average_revenue = mean(payment_value, na.rm = TRUE)) |&gt;\n  mutate(percentage_of_seller_order = proportions(count)*100,\n         seller_id = if_else(is.na(seller_id), \"No Sellers\", seller_id),\n         seller_id = str_trunc(seller_id, width = 15)) |&gt;\n\n  filter(order_status == \"canceled\") |&gt; \n  ungroup() |&gt;\n  arrange(desc(count)) |&gt; \n  rename(number_of_canceled = count) |&gt;\n  select(-order_status)  |&gt;\n  \n  clean_names() |&gt;\n  gt() |&gt;\n  fmt_number(columns = c(`Average Revenue`, `Percentage Of Seller Order`)) |&gt;\n  cols_label(`Number Of Canceled` = md(\"*No.* Canceled\")) |&gt;\n  interactive_gt()\n\n\n\n\n\n\n\n\n\nThe summary table on sellers’ average cancellation rate provides insightful information on the performance of the sellers on the Olist platform. It shows that sellers with canceled orders have an average cancellation rate of 22.3%. However, it is noteworthy that the majority of sellers on the platform do not have any canceled orders, and their sales generate an average of 224 with a median of 132. On the other hand, sellers with canceled orders generate an average of 220 with a median of 115. This indicates that while canceled orders can affect a seller’s reputation, it may not necessarily lead to a significant drop in sales.\n\n\nWhich payment methods are most commonly used by Olist customers, and how does this vary by product category or geographic region?\n\nThe most used payment method\n\norders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  mutate(payment_type = if_else(is.na(payment_type), \"Not Defined\", payment_type)) |&gt;\n  count(payment_type, sort = TRUE, name = \"Count\") |&gt;\n  mutate(percentage = proportions(Count)*100) |&gt;\n  \n  clean_names(c(\"Payment Method\", \"Number of Order\", \"Percentage\")) |&gt;\n  gt() |&gt;\n  fmt_integer() |&gt;\n  fmt_number(columns = Percentage) |&gt;\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            locations = cells_body(columns = `Number of Order`))\n\n\n\n\n\n  \n    \n    \n      Payment Method\n      Number of Order\n      Percentage\n    \n  \n  \n    Credit Card\n76,795\n73.92\n    Boleto\n19,784\n19.04\n    Voucher\n5,775\n5.56\n    Debit Card\n1,529\n1.47\n    Not Defined\n4\n0.00\n  \n  \n  \n\n\n\n\nBased on the summary of orders by payment method, it is clear that the credit card payment option is the most popular payment method for customers. It accounts for about 73.92% of all orders. This could be because credit cards were widely accepted, easy to use and offer customers the convenience of making payments. On the other hand, the use of debit cards for payments is relatively low, accounting for just 1.47% of all orders. This could be because some customers prefer credit cards, or it could be due to the limited use of debit cards in certain regions. Nonetheless, the analysis shows that credit card payments are the preferred payment method for customers.\n\n\nBy product category\n\n\norders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  left_join(order_items, by = \"order_id\") |&gt;\n  left_join(products, by = \"product_id\") |&gt;\n  distinct() |&gt;\n  \n  group_by(product_category_name, payment_type) |&gt;\n  summarise(count = n_distinct(order_id)) |&gt;\n  arrange(desc(count), product_category_name, desc(count)) |&gt;\n  mutate(prop_payment_type = proportions(count)*100,\n         payment_type = if_else(is.na(payment_type), \"No Specified Method\", payment_type)) |&gt;\n  \n  clean_names(c(\"c\", \"Payment Method\", \"Orders\", \"(%) by Payment Method\")) |&gt;\n  gt() |&gt;\n  fmt_integer(columns = Orders) |&gt;\n  fmt_number(columns = `(%) by Payment Method`) |&gt;\n  tab_options(column_labels.font.size = 15,\n              column_labels.font.weight = \"bold\",\n              row_group.background.color = \"#FAFAFA\",\n              row_group.font.size = 13)\n\n\n\n\n\n  \n    \n    \n      Payment Method\n      Orders\n      (%) by Payment Method\n    \n  \n  \n    \n      Bed Bath Table\n    \n    Credit Card\n7,540\n77.93\n    Boleto\n1,601\n16.55\n    Voucher\n414\n4.28\n    Debit Card\n120\n1.24\n    \n      Health Beauty\n    \n    Credit Card\n6,874\n76.61\n    Boleto\n1,704\n18.99\n    Voucher\n248\n2.76\n    Debit Card\n146\n1.63\n    No Specified Method\n1\n0.01\n    \n      Sports Leisure\n    \n    Credit Card\n5,904\n74.90\n    Boleto\n1,586\n20.12\n    Voucher\n274\n3.48\n    Debit Card\n118\n1.50\n    \n      Furniture Decor\n    \n    Credit Card\n4,919\n74.44\n    Boleto\n1,339\n20.26\n    Voucher\n273\n4.13\n    Debit Card\n77\n1.17\n    \n      Computers Accessories\n    \n    Credit Card\n4,737\n69.40\n    Boleto\n1,723\n25.24\n    Voucher\n228\n3.34\n    Debit Card\n138\n2.02\n    \n      Housewares\n    \n    Credit Card\n4,613\n76.31\n    Boleto\n1,044\n17.27\n    Voucher\n286\n4.73\n    Debit Card\n102\n1.69\n    \n      Watches Gifts\n    \n    Credit Card\n4,568\n79.58\n    Boleto\n922\n16.06\n    Voucher\n192\n3.34\n    Debit Card\n58\n1.01\n    \n      Telephony\n    \n    Credit Card\n3,108\n72.50\n    Boleto\n945\n22.04\n    Voucher\n157\n3.66\n    Debit Card\n77\n1.80\n    \n      Toys\n    \n    Credit Card\n3,105\n78.25\n    Boleto\n685\n17.26\n    Voucher\n135\n3.40\n    Debit Card\n43\n1.08\n    \n      Auto\n    \n    Credit Card\n2,988\n75.06\n    Boleto\n783\n19.67\n    Voucher\n140\n3.52\n    Debit Card\n70\n1.76\n    \n      Cool Stuff\n    \n    Credit Card\n2,858\n76.68\n    Boleto\n684\n18.35\n    Voucher\n149\n4.00\n    Debit Card\n36\n0.97\n    \n      Garden Tools\n    \n    Credit Card\n2,603\n72.29\n    Boleto\n814\n22.60\n    Voucher\n135\n3.75\n    Debit Card\n49\n1.36\n    \n      Perfumery\n    \n    Credit Card\n2,501\n77.43\n    Boleto\n535\n16.56\n    Voucher\n150\n4.64\n    Debit Card\n44\n1.36\n    \n      Baby\n    \n    Credit Card\n2,288\n77.61\n    Boleto\n504\n17.10\n    Voucher\n113\n3.83\n    Debit Card\n43\n1.46\n    \n      Electronics\n    \n    Credit Card\n1,852\n71.62\n    Boleto\n608\n23.51\n    Debit Card\n65\n2.51\n    Voucher\n61\n2.36\n    \n      Stationery\n    \n    Credit Card\n1,829\n77.40\n    Boleto\n413\n17.48\n    Voucher\n86\n3.64\n    Debit Card\n35\n1.48\n    \n      NA\n    \n    Credit Card\n1,636\n71.60\n    Boleto\n449\n19.65\n    Voucher\n163\n7.13\n    Debit Card\n34\n1.49\n    Not Defined\n3\n0.13\n    \n      Fashion Bags Accessories\n    \n    Credit Card\n1,392\n71.68\n    Boleto\n388\n19.98\n    Voucher\n132\n6.80\n    Debit Card\n30\n1.54\n    \n      Pet Shop\n    \n    Credit Card\n1,342\n76.64\n    Boleto\n311\n17.76\n    Voucher\n66\n3.77\n    Debit Card\n32\n1.83\n    \n      Office Furniture\n    \n    Credit Card\n897\n69.00\n    Boleto\n352\n27.08\n    Voucher\n38\n2.92\n    Debit Card\n13\n1.00\n    \n      Luggage Accessories\n    \n    Credit Card\n836\n78.28\n    Boleto\n158\n14.79\n    Voucher\n61\n5.71\n    Debit Card\n13\n1.22\n    \n      Consoles Games\n    \n    Credit Card\n806\n73.61\n    Boleto\n228\n20.82\n    Voucher\n45\n4.11\n    Debit Card\n16\n1.46\n    \n      Home Appliances\n    \n    Credit Card\n610\n78.41\n    Boleto\n136\n17.48\n    Voucher\n24\n3.08\n    Debit Card\n8\n1.03\n    \n      Construction Tools Construction\n    \n    Credit Card\n582\n76.88\n    Boleto\n146\n19.29\n    Voucher\n15\n1.98\n    Debit Card\n14\n1.85\n    \n      Small Appliances\n    \n    Credit Card\n491\n76.84\n    Boleto\n121\n18.94\n    Voucher\n16\n2.50\n    Debit Card\n11\n1.72\n    \n      Musical Instruments\n    \n    Credit Card\n466\n72.93\n    Boleto\n136\n21.28\n    Voucher\n27\n4.23\n    Debit Card\n10\n1.56\n    \n      Home Construction\n    \n    Credit Card\n397\n79.24\n    Boleto\n84\n16.77\n    Voucher\n15\n2.99\n    Debit Card\n5\n1.00\n    \n      Books General Interest\n    \n    Credit Card\n380\n72.94\n    Boleto\n120\n23.03\n    Voucher\n15\n2.88\n    Debit Card\n6\n1.15\n    \n      Furniture Living Room\n    \n    Credit Card\n330\n75.69\n    Boleto\n78\n17.89\n    Voucher\n19\n4.36\n    Debit Card\n9\n2.06\n    \n      Food\n    \n    Credit Card\n328\n71.93\n    Boleto\n99\n21.71\n    Debit Card\n16\n3.51\n    Voucher\n13\n2.85\n    \n      Home Confort\n    \n    Credit Card\n319\n78.96\n    Boleto\n65\n16.09\n    Voucher\n14\n3.47\n    Debit Card\n6\n1.49\n    \n      Audio\n    \n    Credit Card\n254\n70.17\n    Boleto\n79\n21.82\n    Voucher\n21\n5.80\n    Debit Card\n8\n2.21\n    \n      Drinks\n    \n    Credit Card\n234\n77.48\n    Boleto\n51\n16.89\n    Debit Card\n12\n3.97\n    Voucher\n5\n1.66\n    \n      Market Place\n    \n    Credit Card\n198\n67.81\n    Boleto\n73\n25.00\n    Voucher\n18\n6.16\n    Debit Card\n3\n1.03\n    \n      Fashion Shoes\n    \n    Credit Card\n195\n78.95\n    Boleto\n38\n15.38\n    Voucher\n11\n4.45\n    Debit Card\n3\n1.21\n    \n      Air Conditioning\n    \n    Credit Card\n192\n75.00\n    Boleto\n54\n21.09\n    Voucher\n7\n2.73\n    Debit Card\n3\n1.17\n    \n      Books Technical\n    \n    Credit Card\n190\n72.52\n    Boleto\n64\n24.43\n    Debit Card\n5\n1.91\n    Voucher\n3\n1.15\n    \n      Kitchen Dining Laundry Garden Furniture\n    \n    Credit Card\n190\n75.40\n    Boleto\n47\n18.65\n    Voucher\n9\n3.57\n    Debit Card\n6\n2.38\n    \n      Home Appliances 2\n    \n    Credit Card\n182\n76.79\n    Boleto\n44\n18.57\n    Voucher\n6\n2.53\n    Debit Card\n5\n2.11\n    \n      Industry Commerce And Business\n    \n    Credit Card\n182\n76.47\n    Boleto\n50\n21.01\n    Voucher\n4\n1.68\n    Debit Card\n2\n0.84\n    \n      Construction Tools Lights\n    \n    Credit Card\n181\n72.69\n    Boleto\n51\n20.48\n    Debit Card\n9\n3.61\n    Voucher\n8\n3.21\n    \n      Food Drink\n    \n    Credit Card\n164\n70.69\n    Boleto\n55\n23.71\n    Voucher\n11\n4.74\n    Debit Card\n2\n0.86\n    \n      Fixed Telephony\n    \n    Credit Card\n162\n72.65\n    Boleto\n49\n21.97\n    Voucher\n9\n4.04\n    Debit Card\n3\n1.35\n    \n      Costruction Tools Garden\n    \n    Credit Card\n155\n77.89\n    Boleto\n38\n19.10\n    Voucher\n5\n2.51\n    Debit Card\n1\n0.50\n    \n      Computers\n    \n    Credit Card\n152\n80.85\n    Boleto\n29\n15.43\n    Voucher\n7\n3.72\n    \n      Art\n    \n    Credit Card\n147\n70.33\n    Boleto\n46\n22.01\n    Voucher\n10\n4.78\n    Debit Card\n6\n2.87\n    \n      Agro Industry And Commerce\n    \n    Credit Card\n125\n67.20\n    Boleto\n51\n27.42\n    Voucher\n6\n3.23\n    Debit Card\n4\n2.15\n    \n      Construction Tools Safety\n    \n    Credit Card\n125\n72.67\n    Boleto\n39\n22.67\n    Voucher\n6\n3.49\n    Debit Card\n2\n1.16\n    \n      Christmas Supplies\n    \n    Credit Card\n98\n75.38\n    Boleto\n29\n22.31\n    Voucher\n2\n1.54\n    Debit Card\n1\n0.77\n    \n      Signaling And Security\n    \n    Credit Card\n94\n67.14\n    Boleto\n40\n28.57\n    Debit Card\n3\n2.14\n    Voucher\n3\n2.14\n    \n      Fashion Underwear Beach\n    \n    Credit Card\n92\n73.02\n    Boleto\n25\n19.84\n    Voucher\n8\n6.35\n    Debit Card\n1\n0.79\n    \n      Fashion Male Clothing\n    \n    Credit Card\n89\n74.79\n    Boleto\n19\n15.97\n    Voucher\n10\n8.40\n    Debit Card\n1\n0.84\n    \n      Costruction Tools Tools\n    \n    Credit Card\n74\n74.75\n    Boleto\n21\n21.21\n    Voucher\n3\n3.03\n    Debit Card\n1\n1.01\n    \n      Furniture Bedroom\n    \n    Credit Card\n66\n68.75\n    Boleto\n26\n27.08\n    Voucher\n3\n3.12\n    Debit Card\n1\n1.04\n    \n      Small Appliances Home Oven And Coffee\n    \n    Credit Card\n64\n85.33\n    Boleto\n9\n12.00\n    Debit Card\n1\n1.33\n    Voucher\n1\n1.33\n    \n      Tablets Printing Image\n    \n    Credit Card\n62\n75.61\n    Boleto\n17\n20.73\n    Voucher\n3\n3.66\n    \n      Dvds Blu Ray\n    \n    Credit Card\n44\n72.13\n    Boleto\n14\n22.95\n    Voucher\n3\n4.92\n    \n      Cine Photo\n    \n    Credit Card\n42\n63.64\n    Boleto\n19\n28.79\n    Debit Card\n3\n4.55\n    Voucher\n2\n3.03\n    \n      Books Imported\n    \n    Credit Card\n41\n75.93\n    Boleto\n12\n22.22\n    Voucher\n1\n1.85\n    \n      Furniture Mattress And Upholstery\n    \n    Credit Card\n32\n82.05\n    Boleto\n6\n15.38\n    Voucher\n1\n2.56\n    \n      Music\n    \n    Credit Card\n28\n71.79\n    Boleto\n9\n23.08\n    Voucher\n2\n5.13\n    \n      Fashio Female Clothing\n    \n    Credit Card\n27\n69.23\n    Boleto\n11\n28.21\n    Voucher\n1\n2.56\n    \n      Party Supplies\n    \n    Credit Card\n27\n67.50\n    Boleto\n10\n25.00\n    Debit Card\n2\n5.00\n    Voucher\n1\n2.50\n    \n      Flowers\n    \n    Credit Card\n22\n75.86\n    Boleto\n7\n24.14\n    \n      Diapers And Hygiene\n    \n    Credit Card\n20\n74.07\n    Boleto\n7\n25.93\n    \n      Fashion Sport\n    \n    Credit Card\n17\n62.96\n    Boleto\n9\n33.33\n    Voucher\n1\n3.70\n    \n      Home Comfort 2\n    \n    Credit Card\n17\n68.00\n    Boleto\n6\n24.00\n    Voucher\n2\n8.00\n    \n      Arts And Craftmanship\n    \n    Credit Card\n13\n56.52\n    Boleto\n7\n30.43\n    Debit Card\n3\n13.04\n    \n      La Cuisine\n    \n    Credit Card\n12\n80.00\n    Voucher\n2\n13.33\n    Boleto\n1\n6.67\n    \n      Cds Dvds Musicals\n    \n    Credit Card\n9\n75.00\n    Boleto\n3\n25.00\n    \n      Portateis Cozinha E Preparadores De Alimentos\n    \n    Credit Card\n8\n57.14\n    Boleto\n4\n28.57\n    Debit Card\n2\n14.29\n    \n      Fashion Childrens Clothes\n    \n    Credit Card\n5\n62.50\n    Boleto\n3\n37.50\n    \n      Pc Gamer\n    \n    Credit Card\n5\n55.56\n    Boleto\n2\n22.22\n    Debit Card\n1\n11.11\n    Voucher\n1\n11.11\n    \n      Security And Services\n    \n    Boleto\n1\n50.00\n    Credit Card\n1\n50.00\n  \n  \n  \n\n\n\n\n\nBased on the table, it is clear that credit card payment is the most preferred payment method for customers across all product categories. The data shows that credit card had an average of 73% of all purchases for each product category. Boleto, voucher and debit card payment options follow credit card payment in that order of preference. This trend is observed across almost all product categories, as the preference for payment options remains relatively consistent.\n\ntemp &lt;- orders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  left_join(order_items, by = \"order_id\") |&gt;\n  left_join(customers, by = \"customer_id\") |&gt;\n  distinct()\n\n\n\nBy geographic region\n\n\ntemp |&gt;\n  group_by(customer_state_name, payment_type) |&gt;\n  summarise(count = n_distinct(order_id)) |&gt;\n  arrange(desc(count), customer_state_name, desc(count)) |&gt;\n  mutate(prop_payment_type = proportions(count)*100,\n         payment_type = if_else(is.na(payment_type), \"No Specified Method\", payment_type)) |&gt;\n  \n  clean_names(c(\"c\", \"Payment Method\", \"Orders\", \"(%) by Paymant Method\")) |&gt;\n  gt() |&gt;\n  fmt_integer(columns = Orders) |&gt;\n  fmt_number(columns = `(%) by Paymant Method`) |&gt;\n  tab_options(column_labels.font.size = 15,\n              column_labels.font.weight = \"bold\",\n              row_group.background.color = \"#FAFAFA\",\n              row_group.font.size = 13)\n\n\n\n\n\n  \n    \n    \n      Payment Method\n      Orders\n      (%) by Paymant Method\n    \n  \n  \n    \n      São Paulo\n    \n    Credit Card\n32,074\n75.22\n    Boleto\n8,205\n19.24\n    Voucher\n1,596\n3.74\n    Debit Card\n759\n1.78\n    Not Defined\n3\n0.01\n    No Specified Method\n1\n0.00\n    \n      Rio de Janeiro\n    \n    Credit Card\n10,253\n77.98\n    Boleto\n2,163\n16.45\n    Voucher\n547\n4.16\n    Debit Card\n185\n1.41\n    \n      Minas Gerais\n    \n    Credit Card\n9,030\n75.81\n    Boleto\n2,304\n19.34\n    Voucher\n438\n3.68\n    Debit Card\n139\n1.17\n    \n      Rio Grande do Sul\n    \n    Credit Card\n3,967\n71.08\n    Boleto\n1,359\n24.35\n    Voucher\n179\n3.21\n    Debit Card\n76\n1.36\n    \n      Paraná\n    \n    Credit Card\n3,776\n73.08\n    Boleto\n1,118\n21.64\n    Voucher\n199\n3.85\n    Debit Card\n74\n1.43\n    \n      Santa Catarina\n    \n    Credit Card\n2,705\n72.75\n    Boleto\n840\n22.59\n    Voucher\n127\n3.42\n    Debit Card\n46\n1.24\n    \n      Bahia\n    \n    Credit Card\n2,643\n75.82\n    Boleto\n614\n17.61\n    Voucher\n176\n5.05\n    Debit Card\n53\n1.52\n    \n      Distrito Federal\n    \n    Credit Card\n1,695\n77.50\n    Boleto\n396\n18.11\n    Voucher\n79\n3.61\n    Debit Card\n17\n0.78\n    \n      Espírito Santo\n    \n    Credit Card\n1,568\n75.38\n    Boleto\n403\n19.38\n    Voucher\n82\n3.94\n    Debit Card\n27\n1.30\n    \n      Goiás\n    \n    Credit Card\n1,514\n73.46\n    Boleto\n449\n21.79\n    Voucher\n76\n3.69\n    Debit Card\n22\n1.07\n    \n      Pernambuco\n    \n    Credit Card\n1,326\n78.23\n    Boleto\n277\n16.34\n    Voucher\n73\n4.31\n    Debit Card\n19\n1.12\n    \n      Ceará\n    \n    Credit Card\n1,083\n79.22\n    Boleto\n205\n15.00\n    Voucher\n59\n4.32\n    Debit Card\n20\n1.46\n    \n      Pará\n    \n    Credit Card\n724\n72.69\n    Boleto\n215\n21.59\n    Voucher\n41\n4.12\n    Debit Card\n16\n1.61\n    \n      MatoGrosso\n    \n    Credit Card\n657\n70.95\n    Boleto\n238\n25.70\n    Voucher\n25\n2.70\n    Debit Card\n6\n0.65\n    \n      Maranhão\n    \n    Credit Card\n534\n70.26\n    Boleto\n203\n26.71\n    Voucher\n19\n2.50\n    Debit Card\n4\n0.53\n    \n      MatoGrosso do Sul\n    \n    Credit Card\n516\n71.07\n    Boleto\n175\n24.10\n    Voucher\n24\n3.31\n    Debit Card\n11\n1.52\n    \n      Paraíba\n    \n    Credit Card\n421\n76.55\n    Boleto\n93\n16.91\n    Voucher\n23\n4.18\n    Debit Card\n13\n2.36\n    \n      Rio Grande do Norte\n    \n    Credit Card\n390\n78.00\n    Boleto\n80\n16.00\n    Voucher\n21\n4.20\n    Debit Card\n9\n1.80\n    \n      Piauí\n    \n    Credit Card\n383\n74.37\n    Boleto\n94\n18.25\n    Voucher\n27\n5.24\n    Debit Card\n11\n2.14\n    \n      Alagoas\n    \n    Credit Card\n338\n80.29\n    Boleto\n68\n16.15\n    Voucher\n10\n2.38\n    Debit Card\n5\n1.19\n    \n      Sergipe\n    \n    Credit Card\n263\n73.46\n    Boleto\n75\n20.95\n    Voucher\n15\n4.19\n    Debit Card\n5\n1.40\n    \n      Tocantins\n    \n    Credit Card\n196\n68.06\n    Boleto\n76\n26.39\n    Voucher\n12\n4.17\n    Debit Card\n4\n1.39\n    \n      Rondônia\n    \n    Credit Card\n184\n71.32\n    Boleto\n64\n24.81\n    Voucher\n7\n2.71\n    Debit Card\n3\n1.16\n    \n      Amazonas\n    \n    Credit Card\n124\n82.12\n    Boleto\n21\n13.91\n    Voucher\n4\n2.65\n    Debit Card\n2\n1.32\n    \n      Acre\n    \n    Credit Card\n61\n73.49\n    Boleto\n16\n19.28\n    Voucher\n4\n4.82\n    Debit Card\n2\n2.41\n    \n      Amapá\n    \n    Credit Card\n47\n67.14\n    Boleto\n20\n28.57\n    Voucher\n3\n4.29\n    \n      Roraima\n    \n    Credit Card\n33\n71.74\n    Boleto\n13\n28.26\n  \n  \n  \n\n\n\n\n\n\ntemp |&gt;\n  group_by(customer_region, payment_type) |&gt;\n  summarise(count = n_distinct(order_id)) |&gt;\n  arrange(desc(count), customer_region, desc(count)) |&gt;\n  mutate(prop_payment_type = proportions(count)*100,\n         payment_type = if_else(is.na(payment_type), \"No Specified Method\", payment_type)) |&gt;\n  \n  clean_names(c(\"c\", \"Payment Method\", \"Orders\", \"(%) by Paymant Method\")) |&gt;\n  gt() |&gt;\n  fmt_integer(columns = Orders) |&gt;\n  fmt_number(columns = `(%) by Paymant Method`) |&gt;\n  tab_options(column_labels.font.size = 15,\n              column_labels.font.weight = \"bold\",\n              row_group.background.color = \"#FAFAFA\",\n              row_group.font.size = 13)\n\n\n\n\n\n  \n    \n    \n      Payment Method\n      Orders\n      (%) by Paymant Method\n    \n  \n  \n    \n      South East\n    \n    Credit Card\n52,925\n75.85\n    Boleto\n13,075\n18.74\n    Voucher\n2,663\n3.82\n    Debit Card\n1,110\n1.59\n    Not Defined\n3\n0.00\n    No Specified Method\n1\n0.00\n    \n      South\n    \n    Credit Card\n10,448\n72.22\n    Boleto\n3,317\n22.93\n    Voucher\n505\n3.49\n    Debit Card\n196\n1.35\n    \n      North East\n    \n    Credit Card\n7,381\n76.47\n    Boleto\n1,709\n17.71\n    Voucher\n423\n4.38\n    Debit Card\n139\n1.44\n    \n      Center West\n    \n    Credit Card\n4,382\n74.27\n    Boleto\n1,258\n21.32\n    Voucher\n204\n3.46\n    Debit Card\n56\n0.95\n    \n      North\n    \n    Credit Card\n1,369\n72.36\n    Boleto\n425\n22.46\n    Voucher\n71\n3.75\n    Debit Card\n27\n1.43\n  \n  \n  \n\n\n\n\n\n\n\n\nSellers\n\nHow many sellers are active on Olist, and how does this number change over time?\n\nActive sellers\n\nsellers |&gt; \n  summarise(number_of_sellers = n_distinct(seller_id)) |&gt;\n  \n  clean_names() |&gt;\n  gt() |&gt;\n  fmt_integer() |&gt;\n  cols_align(align = \"center\") |&gt;\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            locations = cells_body())\n\n\n\n\n\n  \n    \n    \n      Number Of Sellers\n    \n  \n  \n    3,095\n  \n  \n  \n\n\n\n\n\norders |&gt; \n  left_join(select(order_items, order_id, seller_id), by = \"order_id\") |&gt;\n  left_join(sellers, by = \"seller_id\") |&gt;\n  distinct() |&gt;\n  \n  mutate(order_date = date(order_purchase_timestamp),\n         order_year = year(order_purchase_timestamp)) |&gt;\n  group_by(order_date, order_year) |&gt;\n  summarise(number_of_sellers = n_distinct(seller_id)) |&gt;\n  \n  ggplot(aes(x = order_date, y = number_of_sellers)) +\n  geom_line(color = color_line) +\n  facet_wrap(vars(order_year), ncol = 1, scales = \"free\") +\n  labs(x = \"Date\", \n       y = \"No. Sellers\", \n       title = \"Number of Active Sellers on Olist\") +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title, size = 9),\n        axis.text.x = element_text(size = 8))\n\n\n\n\nThe trend chart of the number of active sellers on the Olist platform provides valuable insights into the growth and stability of the platform during the analysis period. The chart shows that there has been steady growth in the number of active sellers on the platform from 2016. The number of active sellers increased from 146 in 2016 to 1,785 in 2017, and then to 2,384 in 2018. This suggests that the platform has been successful in attracting more sellers to its platform over the years. The chart also reveals that the number of active sellers in 2018 saw more variability than in 2017, which is consistent with the patterns observed in the amount of order and revenue generated during the period.\n\n\n\nWhat is the distribution of customer ratings on Olist, and how does this impact sales performance?\n\nsummary(reviews$review_score) |&gt; \n  as.list() |&gt; \n  as.data.frame() |&gt;\n  clean_names(c(\"Minimum\", \"1st Quarter\", \"Median\", \"Mean\", \"3rd Quarter\", \"Maximum\")) |&gt;\n  gt() |&gt;\n  fmt_number(columns = Mean) |&gt;\n  cols_align(align = \"center\") \n\n\n\n\n\n  \n    \n    \n      Minimum\n      1st Quarter\n      Median\n      Mean\n      3rd Quarter\n      Maximum\n    \n  \n  \n    1\n4\n5\n4.09\n5\n5\n  \n  \n  \n\n\n\n\n\nggplot(reviews, aes(x = review_score)) +\n  geom_boxplot() +\n  labs(x = \"Score\", title = \"Review Score Distribution\") +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 13),\n        axis.title.x = element_text(color = color_axis_title),\n        axis.text.y = element_blank())\n\n\n\n\nThe satisfaction survey is an important tool for businesses to understand how their customers feel about their product or service. The distribution of the satisfaction survey given to customers in the above analysis indicates that a significant number of customers are satisfied with their purchase on the Olist platform. The rating system ranges from 1 to 5 with 5 being the best rating and 1 being the worst. The fact that 75% of customers gave a rating of 4 and above shows that the majority of customers were satisfied with the product and the overall transaction experience. This high satisfaction rating is a good indication that Olist is delivered value to its customers and was meeting their needs.\n\nSales performance\n\norders |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  left_join(reviews, by = \"order_id\") |&gt;\n  \n  group_by(review_score) |&gt;\n  \n  summarise(count = n_distinct(customer_id),\n            minimum = min(payment_value, na.rm = TRUE),\n            median = median(payment_value, na.rm = TRUE),\n            maximum = max(payment_value, na.rm = TRUE),\n            total = unique_sum(payment_value)) |&gt;\n  arrange(desc(review_score)) |&gt;\n  \n  clean_names() |&gt;\n  gt() |&gt;\n  fmt_number() |&gt;\n  fmt_integer(columns = c(`Review Score`, Count)) |&gt;\n  gt_fa_rating(`Review Score`, color = \"#000000\", icon = \"star\") |&gt;\n  tab_spanner(label = \"Sales\", columns = Minimum:Total) |&gt;\n  tab_style(style = cell_fill(color = color_highlight),\n            locations = cells_body(columns = Total))\n\n\n\n\n\n  \n    \n    \n      Review Score\n      Count\n      \n        Sales\n      \n    \n    \n      Minimum\n      Median\n      Maximum\n      Total\n    \n  \n  \n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n57,076\n0.00\n98.38\n6,929.31\n4,993,096.00\n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n19,098\n0.00\n97.81\n4,764.34\n2,129,572.17\n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n8,160\n0.00\n97.76\n3,242.84\n1,020,347.62\n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n3,148\n0.17\n104.85\n3,360.66\n499,268.00\n    \n  Star\n  Star\n  Star\n  Star\n  Star\n\n11,393\n0.00\n113.34\n13,664.08\n1,822,821.49\n     \n768\n0.14\n110.12\n6,922.21\n144,678.03\n  \n  \n  \n\n\n\n\nThe sales summary by review score table provides an insightful view of how review scores affect sales. The table shows that orders with higher ratings score of 5 and 4 generated the most sales. This suggests that customers tend to purchase products with high ratings and are more likely to return for future purchases. Additionally, the data reveals that orders with a review score of 1 generated more sales on average and in total than orders with review scores of 2 and 3, even though there were more ratings of 1 than 2 and 3.\n\n\n\n\nCustomers\n\nHow many customers have made repeat purchases on Olist, and what percentage of total sales do they account for?\n\nNumber of returned customers\n\norders |&gt;\n  left_join(customers, by = \"customer_id\") |&gt;\n  \n  group_by(customer_unique_id) |&gt;\n  summarise(count = n_distinct(order_id)) |&gt;\n  mutate(percentage = proportions(count)*100) |&gt;\n  arrange(desc(count)) |&gt;\n  filter(count &gt; 1) |&gt;\n  summarise(total_customers = n_distinct(customer_unique_id),\n            percentage_customer = sum(percentage)) |&gt;\n  \n  clean_names(c(\"Total Customers\", \"Percentage of All Customers\")) |&gt;\n  gt() |&gt;\n  cols_align(\"center\") |&gt;\n  fmt_integer(columns = `Total Customers`) |&gt;\n  fmt_number(columns = `Percentage of All Customers`) |&gt;\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            location = cells_body(columns = `Percentage of All Customers`))\n\n\n\n\n\n  \n    \n    \n      Total Customers\n      Percentage of All Customers\n    \n  \n  \n    2,997\n6.38\n  \n  \n  \n\n\n\n\nThe table shows that there was a low percentage of repeated purchasers on Olist, with just 6.38% of all customers making more than one order. This could be due to several factors, including the nature of the products being sold, the competitiveness of the market, or the quality of customer service provided by the sellers.\n\n\nPercentage of total sales\n\norders |&gt;\n  left_join(customers, by = \"customer_id\") |&gt;\n  left_join(order_payment, by = \"order_id\") |&gt;\n  \n  filter(!order_status %in% c(\"canceled\", \"unavailable\")) |&gt;\n  group_by(customer_unique_id) |&gt;\n  summarise(number_of_orders = n_distinct(order_id),\n            total_sales = sum(payment_value, na.rm = TRUE)) |&gt;\n  mutate(percentage = (total_sales / sum(total_sales))*100 ) |&gt;\n  filter(number_of_orders &gt; 1) |&gt;\n  summarise(total_sales = sum(total_sales),\n            total_percentage = sum(percentage, na.rm = TRUE)) |&gt;\n  \n  clean_names(c(\"Total Sales\", \"Percentage of Total Sales\")) |&gt;\n  gt() |&gt;\n  fmt_number() |&gt;\n  cols_align(\"center\") |&gt;\n  tab_style(style = cell_text(color = color_bold, weight = \"bold\"),\n            location = cells_body(columns = `Percentage of Total Sales`))\n\n\n\n\n\n  \n    \n    \n      Total Sales\n      Percentage of Total Sales\n    \n  \n  \n    890,534.12\n5.66\n  \n  \n  \n\n\n\n\nThe sales data on Olist platform reveals that a vast majority of the sales, about 94.34%, came from customers who made their first purchase. This suggests that Olist should focused on increasing the number of first-time customers to drive sales growth. However, the fact that repeated customers account for only 5.66% of the total sales also highlights the importance of retaining customers. While acquiring new customers is crucial, retaining existing customers can be even more important for building a loyal customer base that generates repeat sales over time.\n\n\n\nWhat is the average customer rating for products sold on Olist\n\norders |&gt; \n  left_join(reviews, by = \"order_id\") |&gt;\n  left_join(order_items, by = \"order_id\") |&gt;\n  left_join(products, by = \"product_id\") |&gt;\n  \n  group_by(product_id) |&gt;\n  summarise(avg_rating = median(review_score, na.rm = TRUE)) |&gt;\n  \n  ggplot(aes(x = avg_rating)) +\n  geom_bar(color = \"white\") +\n  labs(x = \"Rating\", \n       y = \"Count\", \n       title = \"Distribution of Median Rating Score by Product\") +\n  scale_y_continuous(labels = scales::comma_format()) +\n  theme_minimal() +\n  theme(plot.title = element_text(color = color_title, size = 12),\n        axis.title = element_text(color = color_axis_title))\n\n\n\n\nThe analysis of the products by review score chart indicates that the majority of products on Olist have high ratings, with over 15,000 products having a perfect rating score of 5. This was a positive sign for both Olist and its seller as it suggests that the majority of products sold on the platform are of good quality and meet the expectations of customers. Additionally, there were very few products with a low rating score of 2, which is a positive sign as well, as it indicates that customers are not frequently receiving poor-quality products."
  },
  {
    "objectID": "posts/Olist-Analysis/index.html#insights",
    "href": "posts/Olist-Analysis/index.html#insights",
    "title": "Historical Analysis of Olist E-Commerce Platform",
    "section": "Insights",
    "text": "Insights\nThe historical analysis of orders on the Olist platform between June 2016 and October 2018 revealed interesting patterns. 1. The analysis shows a steady increase in the total number of orders in 2017 except for some months such as April, June and December when orders declined. In contrast, 2018, which had more orders on average, saw a steep decline across several months, starting from April down to September, and the biggest decline happened from August to September, where there was a 6,496 difference in order, which means that September only had 16 orders in total.\n\nThe total order across each year showed a seasonality trend, with 2017 having a peaked period that lasted for a short period from 2017-11-23 to 2017-11-29, with the highest being on 2017-11-24.\nThe majority of customers used credit card payment option to process their order, about 73.92% of orders, with debit card being used in just 1.47% of the total orders. Across all product categories, the preference for payment method remains the same, with credit card taking the first choice, followed by Boleto, voucher, and debit card.\nLooking at the Olist platform active sellers trend chart, the overall total number of sellers was 3,095. The number of active sellers on Olist in 2017 saw less variability than in 2018, which closely relates to the patterns in the amount of order and revenue generated during those periods. In 2016 there were 146 active sellers, in 2017, 1,785 and 2018, 2,384.\nThe satisfaction survey results indicate that 75% of customers gave a rating of 4 and above, indicating a high level of satisfaction with the transaction process. According to the sales summary by review score table, orders with higher ratings score (5, 4) generated more sales than those with low ratings, except for those with 1 rating score, which generated more sales on average and in total than orders with 2 and 3 rating scores. It is also worth noting that there were more rating scores of 1 than 2 and 3.\nAbout 93.6% of sales on Olist were from customers making their first purchase, and only 5.66% of the total sales were generated by repeated customers."
  }
]